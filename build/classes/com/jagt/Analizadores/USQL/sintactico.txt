options{
IGNORE_CASE = true;
STATIC = false;
}

PARSER_BEGIN(Sintactico)
package com.jagt.Analizadores.USQL;
import com.jagt.AST.*;
public class Sintactico{
	
        public static void main(String args[]) throws ParseException{

		Sintactico parser = new Sintactico(System.in);
		parser.inicio();

	}

}
PARSER_END(Sintactico)

/* ESPACIOS */

SKIP:{

	" "
	| "\n"              
	| "\t"
        | "\r"
        | "\f"
        | "\b"
        | <LINEA: "#"(~["\n"])*"\n" >    {System.out.println("Esto es un comentario unilinea!");}
        | <MULTILINEA: "#*"(~["*","#"]|~["*"]("#")|("*")~["#"])*"*""""#" >

}

/* AQUI VAN LOS TOKENS (ANALIZADOR LEXICO) */

TOKEN:{
    
        <ENTERO: ("-")?(<DIGITO>)+ >                                                                // INTEGER
    |   <DOBLE: ("-")?(<DIGITO>)+("."(<DIGITO>)+)? >                                                // DOUBLE 
    |   <CADENA: "\""(~["\"","#","\n","\t"]|"##"|"#\"")*"""\"" >                                    // TEXT
    |   <FECHA: (["0"-"3"]["0"-"9"])"-"(["0"-"1"]["0"-"9"])"-"((<DIGITO>)+)>                         // DATE
    |   <HORA: ((["0"-"1"]["0"-"9"])|("2"["0"-"3"]))":"(["0"-"5"]["0"-"9"])":"(["0"-"5"]["0"-"9"]) > // TIME
    |   <RES_DOBLE: "Double" >
    |   <RES_ENTERO: "Integer" >
    |   <RES_CADENA: "Text" >
    |   <RES_BOOLEAN: "Bool" >
    |   <RES_DATE: "Date" >
    |   <RES_DATETIME: "Datetime" >
    |   <VERDADERO: ("true"|"verdadero") >
    |   <FALSO: ("falso"|"false") >
    |   <RES_CREAR: "Crear" >
    |   <RES_BD: "Base_Datos" >
    |   <RES_TABLA: "Tabla" >
    |   <RES_OBJETO: "Objeto" >
    |   <RES_PROCEDIMIENTO: "Procedimiento" >
    |   <RES_FUNCION: "Funcion" >
    |   <RETORNAR: "Retorno" >
    |   <RES_USUARIO: "Usuario" >
    |   <RES_PASSWORD: "Password" >
    |   <RES_COLOCAR: "Colocar" >
    |   <RES_USAR: "Usar" >
    |   <RES_ALTERAR: "Alterar" >
    |   <RES_AGREGAR: "Agregar" >
    |   <RES_QUITAR: "Quitar" >
    |   <RES_CAMBIAR: "Cambiar" >
    |   <RES_ELIMINAR: "Eliminar" >
    |   <RES_INSERTAR: "Insertar" >
    |   <RES_EN: "En" >
    |   <RES_VALORES: "Valores" >
    |   <RES_DONDE: "Donde" >
    |   <RES_ACTUALIZAR: "Actualizar" >
    |   <RES_BORRAR: "Borrar" >
    |   <RES_SELECCIONAR: "Seleccionar" >
    |   <RES_DE: "De" >
    |   <RES_OTORGAR: "Otorgar" >
    |   <RES_DENEGAR: "Denegar" >
    |   <RES_PERMISOS: "Permisos" >
    |   <RES_ORDENAR: "Ordenar_Por" >
    |   <RES_ASC: "ASC" >
    |   <RES_DESC: "DESC" >
    |   <RES_DECLARAR: "Declarar" >
    |   <RES_IMPRIMIR: "Imprimir" >
    |   <RES_FECHA: "Fecha" >
    |   <RES_FECHAHORA: "Fecha_Hora" >
    |   <RES_CONTAR: "Contar" >
    |   <RES_BACKUP: "Backup" >
    |   <RES_USQLDUMP: "USQLDUMP" >
    |   <RES_COMPLETO: "Completo" >
    |   <RES_RESTAURAR: "Restaurar" >
    |   <SI: "Si" >
    |   <SINO: "Sino" >
    |   <SELECCIONA: "Selecciona" >
    |   <CASO: "Caso" >
    |   <DEFECTO: "Defecto" >
    |   <DETENER: "Detener" >
    |   <PARA: "Para" >
    |   <MIENTRAS: "Mientras" >
    |   <ABRE: "{" >
    |   <CIERRA: "}" >
    |   <INCREMENTO: "++" >
    |   <DECREMENTO: "--" >
    |   <PUNTO: "." >
    |   <MAS: "+" >
    |   <MENOS: "-" >
    |   <POR: "*" >
    |   <DIV: "/" >
    |   <POT: "^" >
    |   <MAYOR: ">" >
    |   <MENOR: "<" >
    |   <IGUAL: "==" >
    |   <DIFERENTE: "!=" >
    |   <MENOR_IGUAL: "<=" >
    |   <MAYOR_IGUAL: ">=" >
    |   <ASIGNA: "=" >
    |   <RES_NO: "No" >
    |   <RES_NULO: "Nulo" >
    |   <RES_AUTOINC: "Autoincrementable" >
    |   <RES_PRIMARIA: "Llave_Primaria" >
    |   <RES_FORANEA: "Llave_Foranea" >
    |   <RES_UNICO: "Unico" >
    |   <OR: "||" | "OR" >
    |   <AND: "&&" | "AND" >
    |   <NOT: "!" | "NOT" >
    |   <ID: (<LETRA>)(<LETRA>|<DIGITO>|"_")* >
    |   <VAR: "@"(<ID>) >
    |   <DIGITO: ["0"-"9"] >
    |   <LETRA: ["a"-"z","A"-"Z"] >
 
}

int inicio():
{NodoParser cuerpos,c;}
{
        {cuerpos = new NodoParser("CUERPOS","",1,1);}
        (
          c = instruccionSQL()        {cuerpos.hijos().add(c);}
        )*
        <EOF>
        {AST arbol = new AST(); arbol.graficar(cuerpos); Compilador compi = new Compilador(cuerpos); return 0;}
}

void Empty():
{}
{
    {System.out.println("epsilon");}
}

NodoParser instruccionSQL():
{NodoParser ins;}
{
        ins = crear()           {return ins;}
    |   ins = usar()            {return ins;}
    |   ins = alterar()         {return ins;}
    |   ins = sentencia()       {return ins;}
    |   ins = otorgar()         {return ins;}
    |   ins = denegar()         {return ins;}
    |   ins = backup()          {return ins;}
    |   ins = restaurar()       {return ins;}
}

NodoParser sentencia():
{NodoParser sen;}
{
        sen = insertar()        {return sen;}
    |   sen = eliminar()        {return sen;}
    |   sen = seleccionar()     
        ";"                     {return sen;}
    |   sen = actualizar()      {return sen;}
    |   sen = borrar()          {return sen;}
    |   sen = declarar()        {return sen;}   
    |   sen = asignar()         {return sen;}   
    |   sen = imprimir()        {return sen;}
    |   sen = llamada()         {return sen;}
        ";"
    |   sen = retorno()         {return sen;}
    |   sen = detener()         {return sen;}
    |   sen = control()         {return sen;}
    |   sen = contar()          
        ";"                     {return sen;}
}

NodoParser contar():
{NodoParser nodo,sel; Token t;}
{
    t = <RES_CONTAR>    {nodo = new NodoParser("CONTAR","",t.beginLine,t.beginColumn);}
    "("
    "<"
    "<"
    sel = seleccionar() {nodo.hijos().add(sel);}
    ">"
    ">"
    ")"
    {return nodo;}
}

NodoParser lista_sentencias():
{NodoParser sentencias,s;}
{
        {sentencias = new NodoParser("SENTENCIAS","",0,0);}
        (
            s = sentencia() {sentencias.hijos().add(s);}
        )*
        {return sentencias;}
}

NodoParser detener():
{Token t; NodoParser nodo;}
{
        t = <DETENER> {nodo = new NodoParser("DETENER","",t.beginLine,t.beginColumn);}
        ";"
        {return nodo;}
}

NodoParser retorno():
{Token t; NodoParser nodo,exp;}
{
        t = <RETORNAR>      {nodo = new NodoParser("RETORNAR","",t.beginLine,t.beginColumn);}
        exp = expresion()   {nodo.hijos().add(exp);}
        ";"
        {return nodo;}
}

NodoParser restaurar():
{NodoParser nodo,tipo; Token t,cad;}
{
        t = <RES_RESTAURAR>     {nodo = new NodoParser("RESTAURAR","",t.beginLine,t.beginColumn);}
        tipo = tipo_backup()    {nodo.hijos().add(tipo);}
        cad = <CADENA>          {nodo.hijos().add(new NodoParser("CADENA",cad.image,cad.beginLine,cad.beginColumn));}
        ";"
        {return nodo;}
}

NodoParser backup():
{NodoParser nodo,tipo; Token t,id1,id2;}
{
        t = <RES_BACKUP>        {nodo = new NodoParser("BACKUP","",t.beginLine,t.beginColumn);}
        tipo = tipo_backup()    {nodo.hijos().add(tipo);}
        id1 = <ID>              {nodo.hijos().add(new NodoParser("ID",id1.image,id1.beginLine,id1.beginColumn));}
        id2 = <ID>              {nodo.hijos().add(new NodoParser("ID",id2.image,id2.beginLine,id2.beginColumn));}
        ";"
        {return nodo;}
}

NodoParser tipo_backup():
{Token t;}
{
            t = <RES_USQLDUMP>  {return new NodoParser("TIPO","USQLDUMP",t.beginLine,t.beginColumn);}
        |   t = <RES_COMPLETO>  {return new NodoParser("TIPO","COMPLETO",t.beginLine,t.beginColumn);}
}

NodoParser imprimir():
{NodoParser nodo,exp; Token t;}
{
        t = <RES_IMPRIMIR>      {nodo = new NodoParser("IMPRIMIR","",t.beginLine,t.beginColumn);}
        "("
        exp = expresion()       {nodo.hijos().add(exp);}
        ")"
        ";"
        {return nodo;}
}

NodoParser asignar():
{NodoParser nodo = new NodoParser("ASIGNAR","",0,0); NodoParser acceso,exp; Token id,id2;}
{
        id = <VAR>                  {acceso = new NodoParser("ACCESO","",0,0); acceso.hijos().add(new NodoParser("VAR",id.image,id.beginLine,id.beginColumn));}
        (
            "."
            id2 = <ID>              {acceso.hijos().add(new NodoParser("ID",id2.image,id2.beginLine,id2.beginColumn));}
        )?
        <ASIGNA>
        exp = expresion()           {nodo.hijos().add(acceso); nodo.hijos().add(exp);}
        ";"
        {return nodo;}
}

NodoParser declarar():
{NodoParser declara = new NodoParser("DECLARAR","",0,0); NodoParser vars,tipov,exp;}
{
        <RES_DECLARAR>
        vars = lista_variables()    {declara.hijos().add(vars);}
        tipov = tipo()              {declara.hijos().add(tipov);}
        (
            <ASIGNA>
            exp = expresion()       {declara.hijos().add(exp);}
        )?
        ";"
        {return declara;}
}

NodoParser lista_variables():
{NodoParser nodo = new NodoParser("VARIABLES","",0,0); NodoParser var; Token v;}
{
        v = <VAR>       {nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));}
        (
            ","
            v = <VAR>   {nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));}
        )*
        {return nodo;}
}

NodoParser denegar():
{NodoParser nodo,tipo; Token t,id;}
{
        t = <RES_DENEGAR>       {nodo = new NodoParser("DENEGAR","",t.beginLine,t.beginColumn);}
        <RES_PERMISOS>
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        ","
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        <PUNTO>
        tipo = tipo_permiso()   {nodo.hijos().add(tipo);}
        ";"
        {return nodo;}
}

NodoParser otorgar():
{NodoParser nodo,tipo; Token t,id;}
{
        t = <RES_OTORGAR>       {nodo = new NodoParser("OTORGAR","",t.beginLine,t.beginColumn);}
        <RES_PERMISOS>
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        ","
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        <PUNTO>
        tipo = tipo_permiso()   {nodo.hijos().add(tipo);}
        ";"
        {return nodo;}
}

NodoParser tipo_permiso():
{NodoParser tipo; Token t;}
{
        t = <ID>                {return new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
    |   t = <POR>               {return new NodoParser("TIPO","*",t.beginLine,t.beginColumn);}
}

NodoParser borrar():
{NodoParser nodo,d; Token t,id;}
{
        t = <RES_BORRAR>        {nodo = new NodoParser("BORRAR",t.image,t.beginLine,t.beginColumn);}
        <RES_EN>
        <RES_TABLA>
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        (
            d = donde()         {nodo.hijos().add(d);}
        )?
        ";"                     {return nodo;}
}

NodoParser actualizar():
{NodoParser nodo,lista,d,exps; Token t,id;}
{
        t = <RES_ACTUALIZAR>        {nodo = new NodoParser("ACTUALIZAR",t.image,t.beginLine,t.beginColumn);}
        <RES_TABLA>
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        "("
        lista = lista_ids()         {nodo.hijos().add(lista);}
        ")"
        <RES_VALORES>
        "("
        exps = lista_expresiones()  {nodo.hijos().add(exps);}
        ")"
        (
            d = donde()             {nodo.hijos().add(d);}
        )?
        ";"                         {return nodo;}
}

NodoParser seleccionar():
{NodoParser nodo,s,d,tipo,o,lista,id; Token or,t;}
{
        t = <RES_SELECCIONAR>       {nodo = new NodoParser("SELECCIONAR",t.image,t.beginLine,t.beginColumn);}
        s = seleccion()             {nodo.hijos().add(s);}
        <RES_DE>
        lista = lista_ids()      {nodo.hijos().add(lista);}
        (
            d = donde()             {nodo.hijos().add(d);}
        )?  
        (
            or = <RES_ORDENAR>      {o = new NodoParser("ORDENAR",or.image,or.beginLine,or.beginColumn);}
            id = acceso()           {o.hijos().add(id);}
            tipo = tipo_orden()     {o.hijos().add(tipo); nodo.hijos().add(o);}
        )?
        {return nodo;}
}

NodoParser lista_acceso():
{NodoParser sentencias,s;}
{
        {sentencias = new NodoParser("LISTA_ACCESO","",0,0);}
        s = acceso() {sentencias.hijos().add(s);}
        (
            ","
            s = acceso() {sentencias.hijos().add(s);}
        )*
        {return sentencias;}
}

NodoParser acceso():
{NodoParser nodo = new NodoParser("ACCESO","",0,0); NodoParser a; Token t;}
{
        a = tipo_acceso()    {nodo.hijos().add(a);}
        (
            "."
            t = <ID>         {nodo.hijos().add(new NodoParser("ID",t.image,t.beginLine,t.beginColumn));}
        )*
        {return nodo;}
}

NodoParser tipo_acceso():
{Token t;}
{
        t = <VAR>   {return new NodoParser("VAR",t.image,t.beginLine,t.beginColumn);}
    |   t = <ID>    {return new NodoParser("ID",t.image,t.beginLine,t.beginColumn);}
}

NodoParser seleccion():
{NodoParser nodo; Token id;}
{
        nodo = lista_acceso()       {return nodo;}
    |   id = <POR>                  {return new NodoParser("TODO",id.image,id.beginLine,id.beginColumn);}
}

NodoParser tipo_orden():
{NodoParser nodo; Token t;}
{
        t = <RES_ASC>               {return new NodoParser("ASC",t.image,t.beginLine,t.beginColumn);}
    |   t = <RES_DESC>              {return new NodoParser("DESC",t.image,t.beginLine,t.beginColumn);}
}

NodoParser donde():
{NodoParser cond;}
{
        <RES_DONDE>             
        cond = condicion()          {return cond;}
}

NodoParser eliminar():
{NodoParser nodo,tipo; Token t;}
{
        t = <RES_ELIMINAR>          {nodo = new NodoParser("ELIMINAR",t.image,t.beginLine,t.beginColumn);}
        tipo = tipo_eliminar()      {nodo.hijos().add(tipo);}        
        ";"                         {return nodo;}
}

NodoParser tipo_eliminar():
{NodoParser tipo; Token t,id;}
{
        t = <RES_TABLA>             {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
    |   t = <RES_OBJETO>            {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
    |   t = <RES_BD>                {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
    |   t = <RES_USUARIO>           {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
    |   t = <RES_PROCEDIMIENTO>     {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
    |   t = <RES_FUNCION>           {tipo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {tipo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return tipo;}
}

NodoParser accesar():
{NodoParser nodo; Token id,id2;}
{
        id = <VAR>                      {nodo = new NodoParser("ACCESO","",0,0); nodo.hijos().add(new NodoParser("VAR",id.image,id.beginLine,id.beginColumn));}
        (
            "."
            id2 = <ID>                  {nodo.hijos().add(new NodoParser("ID",id2.image,id2.beginLine,id2.beginColumn));}
        )?
        {return nodo;}
}

NodoParser llamada():
{NodoParser nodo,temp,exp,lista; Token id,id2;}
{
        id = <ID>                       {nodo = new NodoParser("ACCESO","",0,0); nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        (
            temp = tipo_llamada()       {
                                            nodo = temp;
                                            nodo.hijos().addFirst(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
                                        }
        )?                              
        {return nodo;}
}

NodoParser tipo_llamada():
{NodoParser nodo = new NodoParser("ACCESO","",0,0); NodoParser lista; Token id;}
{
        "("
        lista = lista_expresiones() {nodo = new NodoParser("LLAMADA","",0,0); nodo.hijos().add(lista);}
        ")"
        {return nodo;}
    |   "."
        id = <ID>                       {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        (
            "."
            id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        )?
        {return nodo;}
}

NodoParser insertar():
{NodoParser nodo,lista,exps; Token t,id;}
{
        t = <RES_INSERTAR>          {nodo = new NodoParser("INSERTAR",t.image,t.beginLine,t.beginColumn);}
        <RES_EN>       
        <RES_TABLA>
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        (
            "("
            lista = lista_ids()     {nodo.hijos().add(lista);}
            ")"
        )?
        <RES_VALORES>
        "("
        exps = lista_expresiones()  {nodo.hijos().add(exps);}
        ")"
        ";"                         {return nodo;}
}

NodoParser alterar():
{NodoParser nodo,tipo; Token t;}
{
        t = <RES_ALTERAR>            {nodo = new NodoParser("ALTERAR",t.image,t.beginLine,t.beginColumn);}
        tipo = tipo_alterar()        {nodo.hijos().add(tipo);}
        ";"                          {return nodo;}
}

NodoParser tipo_alterar():
{NodoParser nodo,tipo; Token t,id,cad;}
{
        t = <RES_OBJETO>            {nodo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        tipo = tipo_opalterar()     {nodo.hijos().add(tipo); return nodo;}
    |   t = <RES_TABLA>             {nodo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        tipo = tipo_opalterar()     {nodo.hijos().add(tipo);}
    |   t = <RES_USUARIO>           {nodo = new NodoParser("TIPO",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        <RES_CAMBIAR>
        <RES_PASSWORD>
        <ASIGNA>
        cad = <CADENA>              {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
}

NodoParser tipo_opalterar():
{NodoParser nodo,lista; Token t;}
{
        t = <RES_AGREGAR>           {nodo = new NodoParser("AGREGAR",t.image,t.beginLine,t.beginColumn);}
        "("     
        lista = lista_campos()      {nodo.hijos().add(lista); return nodo;}
        ")"
    |   t = <RES_QUITAR>            {nodo = new NodoParser("QUITAR",t.image,t.beginLine,t.beginColumn);}
        lista = lista_ids()         {nodo.hijos().add(lista); return nodo;}
}

NodoParser lista_ids():
{NodoParser nodo; Token id;}
{
        id = <ID>                   {nodo = new NodoParser("IDS","",0,0); nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        (
            ","
            id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        )*
        {return nodo;}
}

NodoParser usar():
{NodoParser nodo; Token t,id;}
{
        t = <RES_USAR>              {nodo = new NodoParser("USAR",t.image,t.beginLine,t.beginColumn);}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        ";"                         {return nodo;}
}

NodoParser crear():
{NodoParser tipo;}
{
        <RES_CREAR>
        tipo = tipo_crear()         {return tipo;}
}

NodoParser tipo_crear():
{NodoParser nodo;}
{
        nodo = crear_base()         {return nodo;}
    |   nodo = crear_tabla()        {return nodo;}
    |   nodo = crear_objeto()       {return nodo;}
    |   nodo = crear_procedimiento(){return nodo;}
    |   nodo = crear_funcion()      {return nodo;}
    |   nodo = crear_usuario()      {return nodo;}
}

NodoParser crear_base():
{NodoParser nodo = new NodoParser("CREAR","",0,0); Token t,id;}
{
        t = <RES_BD>                {nodo.hijos().add(new NodoParser("BD",t.image,t.beginLine,t.beginColumn));}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        ";"                         {return nodo;}
}

NodoParser crear_tabla():
{NodoParser nodo = new NodoParser("CREAR","",0,0); NodoParser lista; Token t,id;}
{
        t = <RES_TABLA>             {nodo.hijos().add(new NodoParser("TABLA",t.image,t.beginLine,t.beginColumn));}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        "("
        lista = lista_campos()      {nodo.hijos().add(lista);}
        ")"
        ";"                         {return nodo;}
}

NodoParser campo():
{NodoParser nodo = new NodoParser("CAMPO","",0,0); NodoParser tip,coms,com; Token id;}
{
        tip = tipo()                {nodo.hijos().add(tip);}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        {coms = new NodoParser("COMPLEMENTOS","",0,0);}
        (
            com = complemento()     {coms.hijos().add(com);}
        )*
        {nodo.hijos().add(coms);}
        {return nodo;}
}

NodoParser lista_campos():
{NodoParser nodo,c;}
{
        c = campo()                 {nodo = new NodoParser("CAMPOS","",0,0); nodo.hijos().add(c);}
        (
            ","
            c = campo()             {nodo.hijos().add(c);}
        )*
        {return nodo;}
}

NodoParser complemento():
{NodoParser nodo = new NodoParser("COMPLEMENTO","",0,0); Token t,id;}
{
        t = <RES_NO> <RES_NULO>     {nodo.hijos().add(new NodoParser("NO NULO","",t.beginLine,t.beginColumn)); return nodo;}
    |   t = <RES_NULO>              {nodo.hijos().add(new NodoParser("NULO","",t.beginLine,t.beginColumn)); return nodo;}
    |   t = <RES_AUTOINC>           {nodo.hijos().add(new NodoParser("AUTOINC","",t.beginLine,t.beginColumn)); return nodo;}
    |   t = <RES_PRIMARIA>          {nodo.hijos().add(new NodoParser("PRIMARIA","",t.beginLine,t.beginColumn)); return nodo;}
    |   t = <RES_FORANEA>           {nodo.hijos().add(new NodoParser("FORANEA","",t.beginLine,t.beginColumn));}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return nodo;}
    |   t = <RES_UNICO>             {nodo.hijos().add(new NodoParser("UNICO","",t.beginLine,t.beginColumn)); return nodo;}
}

NodoParser crear_objeto():
{NodoParser nodo = new NodoParser("CREAR","",0,0); NodoParser lista; Token t,id;}
{
        t = <RES_OBJETO>            {nodo.hijos().add(new NodoParser("OBJETO",t.image,t.beginLine,t.beginColumn));}
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        "("
        lista = lista_atributos()   {nodo.hijos().add(lista);}
        ")"
        ";"                         {return nodo;}
}

NodoParser atributo():
{NodoParser nodo = new NodoParser("ATRIBUTO","",0,0); NodoParser t; Token id;}
{
        t = tipo()                  {nodo.hijos().add(t);}           
        id = <ID>                   {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); return nodo;}
}

NodoParser lista_atributos():
{NodoParser nodo,atr;}
{
        atr = atributo()            {nodo = new NodoParser("ATRIBUTOS","",0,0); nodo.hijos().add(atr);} 
        (
            ","
            atr = atributo()        {nodo.hijos().add(atr);}
        )*
        {return nodo;}
}

NodoParser crear_procedimiento():
{NodoParser nodo = new NodoParser("CREAR","",0,0); NodoParser params,sens; Token t,id,abre,cierra;}
{
        t = <RES_PROCEDIMIENTO>             {nodo.hijos().add(new NodoParser("PROCEDIMIENTO",t.image,t.beginLine,t.beginColumn));}
        id = <ID>                           {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        "("
        (
            params = lista_parametros()     {nodo.hijos().add(params);}
        )?
        ")"
        abre = <ABRE>
            sens = lista_sentencias()       {nodo.hijos().add(sens);}
        cierra = <CIERRA>
        {nodo.inicio = abre.endLine; nodo.fin = cierra.beginLine; return nodo;}
}

NodoParser parametro():
{NodoParser nodo = new NodoParser("PARAMETRO","",0,0); NodoParser t; Token v;}
{
        t = tipo()      {nodo.hijos().add(t);}
        v = <VAR>       {System.out.println(v.image); nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));}
        {return nodo;}
}

NodoParser crear_funcion():
{NodoParser nodo = new NodoParser("CREAR","",0,0); NodoParser params,sens,ti; Token t,id,abre,cierra;}
{
        t = <RES_FUNCION>               {nodo.hijos().add(new NodoParser("FUNCION",t.image,t.beginLine,t.beginColumn));}
        id = <ID>                       {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        "("
        (
            params = lista_parametros() {nodo.hijos().add(params);}
        )?
        ")"
        ti = tipo()                     {nodo.hijos().add(ti);}
        abre = <ABRE>
            sens = lista_sentencias()   {nodo.hijos().add(sens);}
        cierra = <CIERRA>
        {nodo.inicio = abre.endLine; nodo.fin = cierra.beginLine; return nodo;}
}

NodoParser lista_parametros():
{NodoParser nodo = new NodoParser("PARAMS","",0,0); NodoParser p;}
{
        p = parametro()         {nodo.hijos().add(p);}
        (
            ","
            p = parametro()     {nodo.hijos().add(p);}
        )*
        {return nodo;}
}

NodoParser crear_usuario():
{NodoParser nodo = new NodoParser("CREAR","",0,0); Token t,id,cad;}
{
        t = <RES_USUARIO>       {nodo.hijos().add(new NodoParser("USUARIO",t.image,t.beginLine,t.beginColumn));}
        id = <ID>               {nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));}
        <RES_COLOCAR>           
        <RES_PASSWORD>
        <ASIGNA>
        cad = <CADENA>          {nodo.hijos().add(new NodoParser("CADENA",cad.image,cad.beginLine,cad.beginColumn));}
        ";"                     {return nodo;}
}

NodoParser tipo():
{Token t;}
{
      t = <RES_ENTERO> {System.out.println("entero"); return new NodoParser("TIPO","entero",t.beginLine,t.beginColumn);}
    | t = <RES_CADENA> {System.out.println("cadena"); return new NodoParser("TIPO","cadena",t.beginLine,t.beginColumn);}
    | t = <RES_BOOLEAN> {System.out.println("cadena"); return new NodoParser("TIPO","boolean",t.beginLine,t.beginColumn);}
    | t = <RES_DOBLE> {System.out.println("caracter"); return new NodoParser("TIPO","doble",t.beginLine,t.beginColumn);}
    | t = <RES_DATE> {System.out.println("fecha"); return new NodoParser("TIPO","fecha",t.beginLine,t.beginColumn);}
    | t = <RES_DATETIME> {System.out.println("fecha y hora"); return new NodoParser("TIPO","fechahora",t.beginLine,t.beginColumn);}
    | t = <ID> {System.out.println("id: "+t.image); return new NodoParser("ID",t.image,t.beginLine,t.beginColumn);}
}

//EXP
NodoParser expresion():
{NodoParser nodo,ope,exp;}
{
        ope = operacion1()  {}
        exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); return exp;}else{return ope;}}
    |   exp = contar()      {return exp;}
}

NodoParser lista_expresiones():
{NodoParser nodo,exp;}
{
        exp = expresion()            {nodo = new NodoParser("EXPRESIONES","",0,0); nodo.hijos().add(exp);} 
        (
            ","
            exp = expresion()        {nodo.hijos().add(exp);}
        )*
        {return nodo;}
}

NodoParser expresion2():
{NodoParser nodo,ope,exp; Token t;}
{
        t = <MAS>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","+",t.beginLine,t.beginColumn));}
        ope = operacion1()  {}
        exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} return nodo;}
    |   t = <MENOS>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","-",t.beginLine,t.beginColumn));}
        ope = operacion1()  {}
        exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} return nodo;}
    |   Empty()             {return null;}
}

NodoParser operacion1():
{NodoParser nodo,tip,exp;}
{
    tip = tipoValor()       {}
    exp = operacion2()      {if(exp!=null){exp.hijos().addFirst(tip); return exp;}else{return tip;}}
}

NodoParser operacion2():
{NodoParser nodo,exp,ope; Token t;}
{
        t = <POR>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","*",t.beginLine,t.beginColumn));}
        exp = tipoValor()   {}
        ope = operacion2()  {if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} return nodo;}
    |   t = <DIV>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","/",t.beginLine,t.beginColumn));}
        exp = tipoValor()   {}
        ope = operacion2()  {if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} return nodo;}
    |   Empty()             {return null;}
}

NodoParser tipoValor():
{NodoParser nodo = new NodoParser("EXP","",0,0); NodoParser tipo,tipoL; Token t;}
{       "("
        nodo = expresion()
        ")"                 {return nodo;}
    |   t = <ENTERO>        {tipo = new NodoParser("entero",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo; }
    |   t = <CADENA>        {tipo = new NodoParser("cadena",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <FECHA>         {tipo = new NodoParser("fecha",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <HORA>          {tipo = new NodoParser("fechahora",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <DOBLE>         {tipo = new NodoParser("doble",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <VERDADERO>     {tipo = new NodoParser("boolean","1",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <FALSO>         {tipo = new NodoParser("boolean","0",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   tipoL = llamada()   {nodo.hijos().add(tipoL); return nodo;}
    |   tipoL = accesar()   {nodo.hijos().add(tipoL); return nodo;}
}

NodoParser control():
{NodoParser nodo;}
{
        nodo = si()                 {return nodo;}
    |   nodo = para()               {return nodo;}
    |   nodo = seleccion_casos()    {return nodo;}
    |   nodo = mientras()           {return nodo;}
}

NodoParser si():
{NodoParser nodo,con,sen; Token t;}
{
    t = <SI>                        {nodo = new NodoParser("SI","",t.beginLine,t.beginColumn);}
    "("
    con = condicion()               {nodo.hijos().add(con);}
    ")"
    "{"   
    sen = lista_sentencias()        {nodo.hijos().add(sen);}
    "}"
    (
        t = <SINO>              
        "{"                     
        sen = lista_sentencias()    {nodo.hijos().add(sen);}
        "}"                 
    )?
    {return nodo;}
}

NodoParser seleccion_casos():
{NodoParser nodo,exp,cas,def,sen,sns; Token t;}
{
    t = <SELECCIONA>                {nodo = new NodoParser("SELECCIONA","",t.beginLine,t.beginColumn);}
    "("
    exp = expresion()               {nodo.hijos().add(exp);}
    ")"
    "{"
    cas = casos()                   {nodo.hijos().add(cas);}
    (
        <DEFECTO>           
        ":"
        sen = lista_sentencias()    {nodo.hijos().add(sen);}
    )?
    "}"                             {return nodo;}
}

NodoParser casos():
{NodoParser nodo,caso,exp,sns,sen; Token t;}
{
    t = <CASO>                      {nodo = new NodoParser("CASOS","",t.beginLine,t.beginColumn); caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);}
    exp = expresion()               {caso.hijos().add(exp);}
    ":"
    sen = lista_sentencias()        {caso.hijos().add(sen);}
    {nodo.hijos().add(caso);}
    (
        t = <CASO>                  {caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);}
        exp = expresion()           {caso.hijos().add(exp);}
        ":"
        sen = lista_sentencias()    {caso.hijos().add(sen);}
        {nodo.hijos().add(caso);}
    )*                      
    {return nodo;}
}

NodoParser para():
{NodoParser nodo,asig,con,cre,sen; Token t;}
{
    t = <PARA>                  {nodo = new NodoParser("PARA","",t.beginLine,t.beginColumn);}
    "("
    asig = declarar()           {nodo.hijos().add(asig);}
    con = condicion()           {nodo.hijos().add(con);}
    ";"
    cre = crecimiento()         {nodo.hijos().add(cre);}   
    ")"
    "{"             
    sen = lista_sentencias()    {nodo.hijos().add(sen);}
    "}"                         {return nodo;}
}

NodoParser mientras():
{NodoParser nodo,con,sns,sen; Token t;}
{
    t = <MIENTRAS>              {nodo = new NodoParser("MIENTRAS","",t.beginLine,t.beginColumn);}
    "("
    con = condicion()           {nodo.hijos().add(con);}
    ")"
    "{"             
    sen = lista_sentencias()    {nodo.hijos().add(sen);}
    "}"                         {return nodo;}
}

NodoParser condicion():
{NodoParser nodo,ope,con;}
{
    ope = operando1()   {nodo = new NodoParser("EXP","",0,0); if(ope!=null){nodo.hijos().add(ope);}}
    con = condicion2()  {if(con!=null){nodo.hijos().add(con);}}
    {return nodo;}
}

NodoParser condicion2():
{NodoParser nodo,ope,con; Token t;}
{
        t = <OR>                {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","OR",t.beginLine,t.beginColumn));}
        ope = operando1()       {}
        con = condicion2()      {if(con!=null){con.hijos().addFirst(ope); nodo.hijos().add(con);}else{nodo.hijos().add(ope);} return nodo;}
    |   Empty()                 {return null;}
}

NodoParser operando1():
{NodoParser tip,ope;}
{
    tip = tipoCondicion()
    ope = operando2()           {if(ope!=null){ope.hijos().addFirst(tip); return ope;}else{return tip;}}
}

NodoParser operando2():
{NodoParser nodo,tip,ope; Token t;}
{
        t = <AND>                   {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","AND",t.beginLine,t.beginColumn));}
        tip = tipoCondicion()   {}
        ope = operando2()       {if(ope!=null){ope.hijos().addFirst(tip); nodo.hijos().add(ope);}else{nodo.hijos().add(tip);} return nodo;}
    |   Empty()                 {return null;}
}

NodoParser tipoCondicion():
{NodoParser exp,sub,nodo; boolean no = false; Token t;}
{
        // condicion -> NOT subcondicion | subcondicion;
        t = <NOT>                   {System.out.println("! -> NOT"); exp = new NodoParser("EXP","",t.beginLine,t.beginColumn);}
        "("                         {System.out.println("( -> Parentesis condicion");}
        sub = subcondicion()        {exp.hijos().addFirst(new NodoParser("NOT","!",t.beginLine,t.beginColumn)); exp.hijos().add(sub);}
        ")"                         {System.out.println(") -> Parentesis condicion"); return exp;}
    |   sub = subcondicion()        {System.out.println(") -> Parentesis condicion"); return sub;}
}

NodoParser subcondicion():
{NodoParser nodo,exp,opl;}
{      
        // exp -> exp Ope_Logica exp
        exp = expresion()       {}
        opl = operacionLogica() {if(opl!=null){opl.hijos().addFirst(exp); return opl;}else{return exp;}}
}

NodoParser operacionLogica():
{NodoParser nodo,exp; Token t;}
{
        t = <IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","==",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <DIFERENTE>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","!=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MENOR>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MENOR_IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MAYOR_IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MAYOR>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   Empty()           {return null;}
}

NodoParser crecimiento():
{NodoParser nodo,dim,exp; Token t;}
{
        t = <INCREMENTO>    {nodo = new NodoParser("INCREMENTO","++",t.beginLine,t.beginColumn); return nodo;}
    |   t = <DECREMENTO>    {nodo = new NodoParser("DECREMENTO","--",t.beginLine,t.beginColumn); return nodo;}    
}
