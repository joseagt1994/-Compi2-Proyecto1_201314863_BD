options{
IGNORE_CASE = true;
STATIC = false;
}

PARSER_BEGIN(Sintactico)
package com.jagt.Analisis;
import com.jagt.AST.*;
public class Sintactico{
	
        public static void main(String args[]) throws ParseException{

		Sintactico parser = new Sintactico(System.in);
		parser.inicio();

	}

}
PARSER_END(Sintactico)

/* ESPACIOS */

SKIP:{

	" "
	| "\n"              
	| "\t"
        | "\r"
        | "\f"
        | "\b"
        | <LINEA: "#"(~["\n"])*"\n" >    {System.out.println("Esto es un comentario unilinea!");}
        | <MULTILINEA: "#*"(~["*","#"]|~["*"]("#")|("*")~["#"])*"*""""#" >

}

/* AQUI VAN LOS TOKENS (ANALIZADOR LEXICO) */

TOKEN:{
    
        <ENTERO: ("-")?(<DIGITO>)+ >                                                                // INTEGER
    |   <DOBLE: ("-")?(<DIGITO>)+("."(<DIGITO>)+)? >                                                // DOUBLE 
    |   <CADENA: "\""(~["\"","#","\n","\t"]|"##"|"#\"")*"""\"" >                                    // TEXT
    |   <FECHA: (["0"-3"]["0"-"9"])"-"(["0"-"1"]["0"-"9"])"-"((<DIGITO>)+)>                         // DATE
    |   <HORA: ((["0"-"1"]["0"-"9"])|("2"["0"-"3"]))":"(["0"-"5"]["0"-"9"]):(["0"-"5"]["0"-"9"])    // TIME
    |   <RES_DOBLE: "Double" >
    |   <RES_ENTERO: "Integer" >
    |   <RES_CADENA: "Text" >
    |   <RES_BOOLEAN: "Bool" >
    |   <RES_FECHA: "Date" >
    |   <RES_FECHAHORA: "Datetime" >
    |   <VERDADERO: ("true"|"verdadero") >
    |   <FALSO: ("falso"|"false") >
    |   <RES_CREAR: "Crear" >
    |   <RES_BD: "Base_Datos" >
    |   <RES_TABLA: "Tabla" >
    |   <RES_OBJETO: "Objeto" >
    |   <RES_PROCEDIMIENTO: "Procedimiento" >
    |   <RES_FUNCION: "Funcion" >
    |   <RETORNAR: "Retorno" >
    |   <RES_USUARIO: "Usuario" >
    |   <RES_PASSWORD: "Password" >
    |   <RES_COLOCAR: "Colocar" >
    |   <RES_USAR: "Usar" >
    |   <RES_ALTERAR: "Alterar" >
    |   <RES_AGREGAR: "Agregar" >
    |   <RES_QUITAR: "Quitar" >
    |   <RES_CAMBIAR: "Cambiar" >
    |   <RES_ELIMINAR: "Eliminar" >
    |   <RES_INSERTAR: "Insertar" >
    |   <RES_EN: "En" >
    |   <RES_VALORES: "Valores" >
    |   <RES_DONDE: "Donde" >
    |   <RES_ACTUALIZAR: "Actualizar" >
    |   <RES_BORRAR: "Borrar" >
    |   <RES_SELECCIONAR: "Seleccionar" >
    |   <RES_DE: "De" >
    |   <RES_OTORGAR: "Otorgar" >
    |   <RES_DENEGAR: "Denegar" >
    |   <RES_PERMISOS: "Permisos" >
    |   <RES_ORDENAR: "Ordenar_Por" >
    |   <RES_ASC: "ASC" >
    |   <RES_DESC: "DESC" >
    |   <RES_DECLARAR: "Declarar" >
    |   <RES_IMPRIMIR: "Imprimir" >
    |   <FECHA: "Fecha" >
    |   <FECHAHORA: "Fecha_Hora" >
    |   <RES_CONTAR: "Contar" >
    |   <RES_BACKUP: "Backup" >
    |   <RES_USQLDUMP: "USQLDUMP" >
    |   <RES_COMPLETO: "Completo" >
    |   <RES_RESTAURAR: "Restaurar" >
    |   <SI: "Si" >
    |   <SINO: "Sino" >
    |   <SELECCIONA: "Selecciona" >
    |   <CASO: "Caso" >
    |   <DEFECTO: "Defecto" >
    |   <DETENER: "Detener" >
    |   <PARA: "Para" >
    |   <MIENTRAS: "Mientras" >
    |   <INCREMENTO: "++" >
    |   <DECREMENTO: "--" >
    |   <PUNTO: "." >
    |   <MAS: "+" >
    |   <MENOS: "-" >
    |   <POR: "*" >
    |   <DIV: "/" >
    |   <POT: "^" >
    |   <MAYOR: ">" >
    |   <MENOR: "<" >
    |   <IGUAL: "==" >
    |   <DIFERENTE: "!=" >
    |   <MENOR_IGUAL: "<=" >
    |   <MAYOR_IGUAL: ">=" >
    |   <ASIGNA: "=" >
    |   <RES_NO: "No" >
    |   <RES_NULO: "Nulo" >
    |   <RES_AUTOINC: "Autoincrementable" >
    |   <RES_PRIMARIA: "Llave_Primaria" >
    |   <RES_FORANEA: "Llave_Foranea" >
    |   <RES_UNICO: "Unico" >
    |   <OR: "||" >
    |   <AND: "&&" >
    |   <NOT: "!" >
    |   <ID: (<LETRA>)(<LETRA>|<DIGITO>|"_")* >
    |   <VAR: "@"(<ID>) >
    |   <DIGITO: ["0"-"9"] >
 
}

int inicio():
{Interprete in; NodoParser v,e,nodo,cuerpos,c; Token t;}
{
        {cuerpos = new NodoParser("CUERPOS","",t.beginLine,t.beginColumn);}
        (
          c = instruccionSQL()        {cuerpos.hijos().add(c);}
        )*
        <EOF>
        {return 1;}
}

void Empty():
{}
{
    {System.out.println("epsilon");}
}

NodoParser instruccionSQL():
{}
{
        crear()
    |   usar()
    |   alterar()
    |   sentencia()
    |   otorgar()
    |   denegar()
    |   backup()
    |   restaurar()
}

NodoParser sentencia():
{}
{
        insertar()
    |   eliminar()
    |   seleccionar()
    |   actualizar()
    |   borrar()
    |   declarar()
    |   asignar()
    |   imprimir()
    |   llamada()
        ";"
    |   retorno()
    |   detener()
    |   control()
}

NodoParser lista_sentencias():
{}
{
        (
            sentencia()
        )*
}

NodoParser detener():
{}
{
        <DETENER>
        ";"
}

NodoParser retorno():
{}
{
        <RETORNAR>   
        expresion()
        ";"
}

NodoParser restaurar():
{}
{
        <RES_RESTAURAR>
        (<RES_USQLDUMP> | <RES_COMPLETO>)
        <CADENA>
        ";"
}

NodoParser backup():
{}
{
        <RES_BACKUP>
        (<RES_USQLDUMP> | <RES_COMPLETO>)
        <ID>
        <ID>
        ";"
}

NodoParser imprimir():
{}
{
        <RES_IMPRIMIR>
        "("
        expresion()
        ")"
        ";"
}

NodoParser asignar():
{}
{
        <VAR>
        (
            <PUNTO>
            <ID>
        )?
        <ASIGNA>
        expresion()
        ";"
}

NodoParser declarar():
{}
{
        <RES_DECLARAR>
        lista_variables()
        tipo()
        <ASIGNA>
        expresion()
        ";"
}

NodoParser lista_variables():
{}
{
        <VAR>
        (
            ","
            <VAR>
        )*
}

NodoParser denegar():
{}
{
        <RES_DENEGAR>
        <RES_PERMISOS>
        <ID>
        ","
        <ID>
        <PUNTO>
        tipo_permiso()
        ";"
}

NodoParser otorgar():
{}
{
        <RES_OTORGAR>
        <RES_PERMISOS>
        <ID>
        ","
        <ID>
        <PUNTO>
        tipo_permiso()
        ";"
}

NodoParser tipo_permiso():
{}
{
        <ID>
    |   <POR>
}

NodoParser borrar():
{}
{
        <RES_BORRAR>
        <RES_EN>
        <RES_TABLA>
        <ID>
        (
            donde()
        )?
        ";"
}

NodoParser actualizar():
{}
{
        <RES_ACTUALIZAR>
        <RES_TABLA>
        <ID>
        "("
        lista_ids()
        ")"
        <RES_VALORES>
        "("
        lista_expresiones()
        ")"
        (
            donde()
        )?
        ";"
}

NodoParser seleccionar():
{}
{
        <RES_SELECCIONAR>
        seleccion()
        (
            donde()
        )?
        (
            <RES_ORDENAR>
            <ID>
            tipo_orden()
        )?
        ";"
}

NodoParser seleccion():
{}
{
        lista_ids()
    |   <POR>
}

NodoParser tipo_orden():
{}
{
        <RES_ASC>
    |   <RES_DESC>
}

NodoParser donde():
{}
{
        <RES_DONDE>
        condicion()
}

NodoParser eliminar():
{}
{
        <RES_ELIMINAR>
        tipo_eliminar()
        ";"
}

NodoParser tipo_eliminar():
{}
{
        <RES_TABLA>
        <ID>
    |   <RES_OBJETO>
        <ID>
    |   <RES_BD>
        <ID>
    |   <RES_USUARIO>
        <ID>
    |   <RES_PROCEDIMIENTO>
        <ID>
    |   <RES_FUNCION>
        <ID>
}

NodoParser llamada():
{}
{
        <ID>
        "("
        lista_expresiones()
        ")"
}

NodoParser insertar():
{}
{
        <RES_INSERTAR>
        <RES_EN>
        <ID>
        (
            "("
            lista_ids()
            ")"
        )?
        <RES_VALORES>
        "("
        lista_expresiones()
        ")"
        ";"
}

NodoParser alterar():
{}
{
        <RES_ALTERAR>
        tipo_alterar()
        ";"
}

NodoParser tipo_alterar():
{}
{
        <RES_OBJETO>
        <ID>
        tipo_opalterar()
    |   <RES_TABLA>
        <ID>
        tipo_opalterar()
    |   <RES_USUARIO>
        <ID>
        <RES_CAMBIAR>
        <RES_PASSWORD>
        <ASIGNA>
        <CADENA>
}

NodoParser tipo_opalterar():
{}
{
        <RES_AGREGAR>
        "("
        lista_campos()
        ")"
    |   <RES_QUITAR>
        lista_ids()
}

NodoParser lista_ids():
{}
{
        <ID>
        (
            ","
            <ID>
        )*
}

NodoParser usar():
{}
{
        <RES_USAR>
        <ID>
        ";"
}

NodoParser crear():
{}
{
        <RES_CREAR>
        tipo_crear()
}

NodoParser tipo_crear():
{}
{
        crear_base()
    |   crear_tabla()
    |   crear_objeto()
    |   crear_procedimiento()
    |   crear_funcion()
    |   crear_usuario()
}

NodoParser crear_base():
{}
{
        <RES_BD>
        <ID>
        ";"
}

NodoParser crear_tabla():
{}
{
        <RES_TABLA>
        <ID>
        "("
        lista_campos()
        ")"
        ";"
}

NodoParser campo():
{}
{
        tipo()
        <ID>
        (
            complemento()
        )*
}

NodoParser lista_campos():
{}
{
        campo()
        (
            ","
            campo()
        )*
}

NodoParser complemento():
{}
{
        <RES_NO> <RES_NULO>
    |   <RES_NULO>
    |   <RES_AUTOINC>
    |   <RES_PRIMARIA>
    |   <RES_FORANEA>
    |   <RES_UNICO>
}

NodoParser crear_objeto():
{}
{
        <RES_OBJETO>
        <ID>
        "("
        lista_atributos()
        ")"
        ";"
}

NodoParser atributo():
{}
{
        tipo()
        <ID>
}

NodoParser lista_atributos():
{}
{
        atributo()
        (
            ","
            atributo()
        )*
}

NodoParser crear_procedimiento():
{}
{
        <RES_PROCEDIMIENTO>
        <ID>
        "("
        (
            lista_parametros()
        )?
        ")"
        "{"
            lista_sentencias()
        "}"
}

NodoParser parametro():
{}
{
        tipo()
        <VAR>
}

NodoParser crear_funcion():
{}
{
        <RES_FUNCION>
        <ID>
        "("
        (
            lista_parametros()
        )?
        ")"
        "{"
            lista_sentencias()
        "}"
}

NodoParser lista_parametros():
{}
{
        parametro()
        (
            ","
            parametro()
        )*
}

NodoParser crear_usuario():
{}
{
        <RES_USUARIO>
        <ID>
        <RES_COLOCAR>
        <RES_PASSWORD>
        <ASIGNA>
        <CADENA>
        ";"
}

NodoParser tipo():
{Token t;}
{
      t = <RES_ENTERO> {System.out.println("entero"); return new NodoParser("TIPO","entero",t.beginLine,t.beginColumn);}
    | t = <RES_CADENA> {System.out.println("cadena"); return new NodoParser("TIPO","cadena",t.beginLine,t.beginColumn);}
    | t = <RES_CARACTER> {System.out.println("caracter"); return new NodoParser("TIPO","caracter",t.beginLine,t.beginColumn);}
    | t = <RES_BOOLEAN> {System.out.println("cadena"); return new NodoParser("TIPO","boolean",t.beginLine,t.beginColumn);}
    | t = <RES_DOBLE> {System.out.println("caracter"); return new NodoParser("TIPO","doble",t.beginLine,t.beginColumn);}
}

//EXP
NodoParser expresion():
{NodoParser nodo,ope,exp;}
{
    ope = operacion1()  {}
    exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); return exp;}else{return ope;}}
}

NodoParser expresion2():
{NodoParser nodo,ope,exp; Token t;}
{
        t = <MAS>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","+",t.beginLine,t.beginColumn));}
        ope = operacion1()  {}
        exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} return nodo;}
    |   t = <MENOS>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","-",t.beginLine,t.beginColumn));}
        ope = operacion1()  {}
        exp = expresion2()  {if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} return nodo;}
    |   Empty()             {return null;}
}

NodoParser operacion1():
{NodoParser nodo,tip,exp;}
{
    tip = tipoValor()       {}
    exp = operacion2()      {if(exp!=null){exp.hijos().addFirst(tip); return exp;}else{return tip;}}
}

NodoParser operacion2():
{NodoParser nodo,exp,ope; Token t;}
{
        t = <POR>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","*",t.beginLine,t.beginColumn));}
        exp = tipoValor()   {}
        ope = operacion2()  {if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} return nodo;}
    |   t = <DIV>                 {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","/",t.beginLine,t.beginColumn));}
        exp = tipoValor()   {}
        ope = operacion2()  {if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} return nodo;}
    |   Empty()             {return null;}
}

NodoParser tipoValor():
{NodoParser nodo = new NodoParser("EXP","",0,0); NodoParser tipo,tipoL; Token t;}
{       "("
        nodo = expresion()
        ")"                 {return nodo;}
    |   t = <ENTERO>        {tipo = new NodoParser("entero",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo; }
    |   t = <CADENA>        {tipo = new NodoParser("cadena",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <CARACTER>      {tipo = new NodoParser("caracter",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <DOBLE>         {tipo = new NodoParser("doble",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <VERDADERO>     {tipo = new NodoParser("boolean","1",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <FALSO>         {tipo = new NodoParser("boolean","0",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); return nodo;}
    |   t = <ID> tipoL = tipoLlamada()    {nodo.hijos().add(new NodoParser("ID",t.image,t.beginLine,t.beginColumn)); if(tipoL != null){ nodo.hijos().add(tipoL); } return nodo;}
    //Puede ser metodo o llamada a una dimension del arreglo AGREGAR ORDENAR Y SUMARIZAR
}

NodoParser control():
{}
{
        si()
    |   para()
    |   seleccion()
    |   mientras()
}

NodoParser si():
{NodoParser nodo,con,sen,sn,sns; Token t;}
{
    t = <SI>                    {nodo = new NodoParser("SI","",t.beginLine,t.beginColumn);}
    "("
    con = condicion()       {nodo.hijos().add(con);}
    ")"
    abreInterrogacion()                {sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
    (
        sen = sentencias()      {sns.hijos().add(sen);}
    )*
    "?"                     {nodo.hijos().add(sns);}
    (
        t = <SINO>              {sn = new NodoParser("SINO","",t.beginLine,t.beginColumn);}
        abreInterrogacion()            {sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
        (
            sen = sentencias()  {sns.hijos().add(sen);}
        )*
        "?"                 {sn.hijos().add(sns); nodo.hijos().add(sn);}
    )?
    {return nodo;}
}

NodoParser comprobar():
{NodoParser nodo,exp,cas,def,sen,sns; Token t;}
{
    t = <COMPROBAR>         {nodo = new NodoParser("COMPROBAR","",t.beginLine,t.beginColumn);}
    "("
    exp = expresion()            {nodo.hijos().add(exp);}
    ")"
    abreInterrogacion()
    cas = casos()       {nodo.hijos().add(cas);}
    (
        t = <DEFECTO>       {def = new NodoParser("DEFECTO","",t.beginLine,t.beginColumn); sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
        ":"
        (
            sen = sentencias()      {sns.hijos().add(sen);}
        )*
        {def.hijos().add(sns); nodo.hijos().add(def);}
    )?
    "?"                         {return nodo;}
}

NodoParser casos():
{NodoParser nodo,caso,exp,sns,sen; Token t;}
{
    t = <CASO>              {nodo = new NodoParser("CASOS","",t.beginLine,t.beginColumn); caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);}
    exp = expresion()   {caso.hijos().add(exp); sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
    ":"
    (   
        sen = sentencias()  {sns.hijos().add(sen);}
    )*
    {caso.hijos().add(sns); nodo.hijos().add(caso);}
    (
        t = <CASO>              {caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);}
        exp = expresion()   {caso.hijos().add(exp); sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
        ":"
        (
            sen = sentencias()  {sns.hijos().add(sen);}
        )*
        {caso.hijos().add(sns); nodo.hijos().add(caso);}
    )*                      
    {return nodo;}
}

NodoParser para():
{NodoParser nodo,asig,con,cre,sen,sns,inc;
Token t,tp;}
{
    // para -> asignacion condicion crecimiento sentencias
    t = <PARA>               {nodo = new NodoParser("PARA","",t.beginLine,t.beginColumn);}
    "("
    asig = asignacion()  {nodo.hijos().add(asig);}
    ";"
    con = condicion()    {nodo.hijos().add(con);}
    ";"
    tp = <ID>
    cre = crecimiento()  {cre.hijos().addFirst(new NodoParser("ID",tp.image,tp.beginLine,tp.beginColumn)); nodo.hijos().add(cre);}   
    ")"
    abreInterrogacion()             {sns = new NodoParser("SENTENCIAS","",tp.beginLine,tp.beginColumn);}
    (
        sen = sentencias()   {sns.hijos().add(sen);}
    )*
    "?"                  {nodo.hijos().add(sns); return nodo;}
}

NodoParser mientras():
{NodoParser nodo,con,sns,sen; Token t;}
{
    t = <MIENTRAS>          {nodo = new NodoParser("MIENTRAS","",t.beginLine,t.beginColumn);}
    "("
    con = condicion()   {nodo.hijos().add(con);}
    ")"
    abreInterrogacion()            {sns = new NodoParser("SENTENCIAS","",t.beginLine,t.beginColumn);}
    (   
        sen = sentencias()  {sns.hijos().add(sen);}
    )* 
    "?"                 {nodo.hijos().add(sns); return nodo;}
}

NodoParser condicion():
{NodoParser nodo,ope,con;}
{
    ope = operando1()   {}
    con = condicion2()  {if(con!=null){con.hijos().addFirst(ope); return con;}else{return ope;}}
}

NodoParser condicion2():
{NodoParser nodo,ope,con; Token t;}
{
        t = <OR>                    {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","OR",t.beginLine,t.beginColumn));}
        ope = operando1()       {}
        con = condicion2()      {if(con!=null){con.hijos().addFirst(ope); nodo.hijos().add(con);}else{nodo.hijos().add(ope);} return nodo;}
    |   Empty()                 {return null;}
}

NodoParser operando1():
{NodoParser tip,ope;}
{
    tip = tipoCondicion()
    ope = operando2()           {if(ope!=null){ope.hijos().addFirst(tip); return ope;}else{return tip;}}
}

NodoParser operando2():
{NodoParser nodo,tip,ope; Token t;}
{
        t = <AND>                   {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","AND",t.beginLine,t.beginColumn));}
        tip = tipoCondicion()   {}
        ope = operando2()       {if(ope!=null){ope.hijos().addFirst(tip); nodo.hijos().add(ope);}else{nodo.hijos().add(tip);} return nodo;}
    |   Empty()                 {return null;}
}

NodoParser tipoCondicion():
{NodoParser exp,sub,nodo; boolean no = false; Token t;}
{
        // condicion -> NOT subcondicion | subcondicion;
        t = <NOT>                   {System.out.println("! -> NOT"); exp = new NodoParser("EXP","",t.beginLine,t.beginColumn);}
        "("                     {System.out.println("( -> Parentesis condicion");}
        sub = subcondicion()    { exp.hijos().addFirst(new NodoParser("NOT","!",t.beginLine,t.beginColumn)); exp.hijos().add(sub);}
        ")"                     {System.out.println(") -> Parentesis condicion"); return exp;}
    |   "("                     {System.out.println("( -> Parentesis condicion");}
        sub = subcondicion()
        ")"                    {System.out.println(") -> Parentesis condicion"); return sub;}
}

NodoParser subcondicion():
{Token t; NodoParser nodo;}
{
        // subcondicion2 -> NULO id
        
        t = <NULO>             {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn);}
        t = <ID>               {nodo.hijos().add(new NodoParser("NULO","!&¡",t.beginLine,t.beginColumn)); nodo.hijos().add(new NodoParser("ID",t.image,t.beginLine,t.beginColumn)); return nodo;}
    |   nodo = subcondicion2() {return nodo;}
}

NodoParser subcondicion2():
{NodoParser nodo,exp,opl;}
{      
        // exp -> exp Ope_Logica exp
        exp = expresion()       {}
        opl = operacionLogica() {if(opl!=null){opl.hijos().addFirst(exp); return opl;}else{return exp;}}
}

NodoParser operacionLogica():
{NodoParser nodo,exp; Token t;}
{
        t = <IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","==",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <DIFERENTE>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","!=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MENOR>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MENOR_IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MAYOR_IGUAL>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   t = <MAYOR>
        exp = expresion() {nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); return nodo;}
    |   Empty()           {return null;}
}

NodoParser crecimiento():
{NodoParser nodo,dim,exp; Token t;}
{
        t = <INCREMENTO>    {nodo = new NodoParser("CRECIMIENTO","++",t.beginLine,t.beginColumn); return nodo;}
    |   t= <DECREMENTO>    {nodo = new NodoParser("CRECIMIENTO","--",t.beginLine,t.beginColumn); return nodo;}
    |   t = <MAS_IGUAL>     
        exp = expresion()   {nodo = new NodoParser("ASIGNACION","+=",t.beginLine,t.beginColumn); nodo.hijos().add(exp); return nodo;}
    |   t = <MENOS_IGUAL>   
        exp = expresion()   {nodo = new NodoParser("ASIGNACION","-=",t.beginLine,t.beginColumn); nodo.hijos().add(exp); return nodo;}
    |   t = <ASIGNA>
        exp = expresion()   {nodo = new NodoParser("ASIGNACION","=",t.beginLine,t.beginColumn); nodo.hijos().add(exp); return nodo;}
    |   exp = valores()     {return exp;}
    |   dim = dimensiones() 
        t = <ASIGNA>        {nodo = new NodoParser("ARREGLO","=",t.beginLine,t.beginColumn); nodo.hijos().add(dim);}
        exp = expresion()   {nodo.hijos().add(exp); return nodo;}
        
}
