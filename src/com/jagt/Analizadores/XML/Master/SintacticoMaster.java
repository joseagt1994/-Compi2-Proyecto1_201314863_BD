/* Generated By:JavaCC: Do not edit this line. SintacticoMaster.java */
package com.jagt.Analizadores.XML.Master;
import com.jagt.AST.*;
import java.util.LinkedList;

public class SintacticoMaster implements SintacticoMasterConstants {

        public static void main(String args[]) throws ParseException{

                SintacticoMaster parser = new SintacticoMaster(System.in);
                parser.inicio();

        }

  final public LinkedList<DataBase> inicio() throws ParseException {
 LinkedList<DataBase> bases = new LinkedList<DataBase>(); DataBase bd;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_BD:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      bd = base_datos();
                                 bases.add(bd);
    }
    jj_consume_token(0);
         {if (true) return bases;}
    throw new Error("Missing return statement in function");
  }

  final public DataBase base_datos() throws ParseException {
 DataBase bd;
    jj_consume_token(INICIO_BD);
    bd = cuerpo();
    jj_consume_token(FIN_BD);
         {if (true) return bd;}
    throw new Error("Missing return statement in function");
  }

  final public DataBase cuerpo() throws ParseException {
 DataBase bd; Token id,ruta; LinkedList<String> usuarios;
    jj_consume_token(INICIO_NOMBRE);
                                 bd = new DataBase();
    id = jj_consume_token(ID);
                                 bd.setNombre(id.image);
    jj_consume_token(FIN_NOMBRE);
    jj_consume_token(INICIO_RUTA);
    ruta = jj_consume_token(RUTA);
                                 bd.setRuta(ruta.image);
    jj_consume_token(FIN_RUTA);
    jj_consume_token(INICIO_PERMISOS);
    usuarios = permisos();
                                 bd.setPermisos(usuarios);
    jj_consume_token(FIN_PERMISOS);
         {if (true) return bd;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<String> permisos() throws ParseException {
 Token cod; LinkedList<String> usuarios = new LinkedList<String>();
    label_2:
    while (true) {
      jj_consume_token(INICIO_USUARIO);
      cod = jj_consume_token(NUMERO);
                                 usuarios.add(cod.image);
      jj_consume_token(FIN_USUARIO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_USUARIO:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
         {if (true) return usuarios;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SintacticoMasterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x10000,};
   }

  /** Constructor with InputStream. */
  public SintacticoMaster(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SintacticoMaster(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SintacticoMasterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SintacticoMaster(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SintacticoMasterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SintacticoMaster(SintacticoMasterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SintacticoMasterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
