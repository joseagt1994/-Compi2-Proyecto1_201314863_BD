/* Generated By:JavaCC: Do not edit this line. SintacticoMetodosTokenManager.java */
package com.jagt.Analizadores.XML.Metodos;
import com.jagt.AST.*;

/** Token Manager. */
public class SintacticoMetodosTokenManager implements SintacticoMetodosConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200100000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 65;
         }
         if ((active0 & 0x4800000000000000L) != 0L)
            return 76;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 45;
         }
         if ((active0 & 0x10004000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 36;
         }
         if ((active0 & 0xc00000000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 54;
         }
         if ((active0 & 0x3ff1efa39000000L) != 0L || (active1 & 0x7e00L) != 0L)
         {
            jjmatchedKind = 82;
            return 75;
         }
         return -1;
      case 1:
         if ((active0 & 0x66108200000000L) != 0L || (active1 & 0x200L) != 0L)
            return 75;
         if ((active0 & 0x399ef7c3d000000L) != 0L || (active1 & 0x7c00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 1;
            }
            return 75;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 1;
            }
            return 64;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000000000L) != 0L)
            return 75;
         if ((active0 & 0x3fdfb7d3d000000L) != 0L || (active1 & 0x7c00L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
            return 75;
         }
         return -1;
      case 3:
         if ((active0 & 0x9408003c000000L) != 0L || (active1 & 0x400L) != 0L)
            return 75;
         if ((active0 & 0x369f37d01000000L) != 0L || (active1 & 0x7800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 3;
            }
            return 75;
         }
         return -1;
      case 4:
         if ((active0 & 0x369327521000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 4;
            }
            return 75;
         }
         if ((active0 & 0xc10800000000L) != 0L || (active1 & 0x4000L) != 0L)
            return 75;
         return -1;
      case 5:
         if ((active0 & 0x1002001000000L) != 0L)
            return 75;
         if ((active0 & 0x368b25520000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
            return 75;
         }
         return -1;
      case 6:
         if ((active0 & 0x260000400000000L) != 0L)
            return 75;
         if ((active0 & 0x108b25120000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
            return 75;
         }
         return -1;
      case 7:
         if ((active0 & 0x8825000000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
            return 75;
         }
         if ((active0 & 0x100300120000000L) != 0L)
            return 75;
         return -1;
      case 8:
         if ((active0 & 0x8825000000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 8;
            return 75;
         }
         return -1;
      case 9:
         if ((active0 & 0x8805000000000L) != 0L)
            return 75;
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 9;
            }
            return 75;
         }
         return -1;
      case 10:
         if ((active0 & 0x24000000000L) != 0L)
            return 75;
         if ((active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 10;
            return 75;
         }
         return -1;
      case 11:
         if ((active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 11;
            return 75;
         }
         return -1;
      case 12:
         if ((active1 & 0x2000L) != 0L)
            return 75;
         if ((active1 & 0x1800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 12;
            return 75;
         }
         return -1;
      case 13:
         if ((active1 & 0x1000L) != 0L)
            return 75;
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 13;
            return 75;
         }
         return -1;
      case 14:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 14;
            return 75;
         }
         return -1;
      case 15:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 15;
            return 75;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 42:
         return jjStopAtPos(0, 63);
      case 43:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 89);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 60);
      case 47:
         return jjStopAtPos(0, 64);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 86);
      case 60:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0xffc000L, 0x40L);
      case 61:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 94:
         return jjStopAtPos(0, 65);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x41000000000L, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2008000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x11000000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x60188831000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200100000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe004000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10004000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 90);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 125:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 43:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 45:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xaa8000L, active1, 0L);
      case 61:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x90010430000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x268d84004000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x104000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 75);
         return jjMoveStringLiteralDfa2_0(active0, 0x100010000L, active1, 0x4000L);
      case 79:
      case 111:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 75);
         return jjMoveStringLiteralDfa2_0(active0, 0x1002809000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x44000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000400000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000100000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00L);
      case 124:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x3000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 75);
         return jjMoveStringLiteralDfa3_0(active0, 0xd00000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000400000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004400000000L, active1, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000800020000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000088000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000904000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080100200000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x240001030000000L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 75);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 75);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x4000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x68024120800000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 75);
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 75);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 75);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 75);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000400024000L, active1, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000248000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 75);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000400000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(4, 22);
         break;
      case 65:
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 75);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1903000040000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x28004000204000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 75);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 75);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000500080000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000020800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0x3000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000080000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8004000008000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 75);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000400000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000040000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x800L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 75);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 75);
         return jjMoveStringLiteralDfa6_0(active0, 0x100100000010000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100100100000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8205000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20080000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 75);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 75);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 75);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000020000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 75);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 75);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8804000000000L, active1, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 75);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 75);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 75);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1800L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 75);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(8, 19);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8004000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 75);
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 38, 75);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 77, 75);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x1000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 76, 75);
         return jjMoveStringLiteralDfa14_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(16, 75, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 65:
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(69, 70);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(70, 71);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(69);
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddStates(6, 8);
                  break;
               case 4:
                  if ((0xfffffbf7ffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 35)
                     jjCheckNAddStates(6, 8);
                  break;
               case 7:
                  if (curChar == 42)
                     jjAddStates(9, 10);
                  break;
               case 8:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 9:
                  if (curChar == 35 && kind > 8)
                     kind = 8;
                  break;
               case 10:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 12:
                  if ((0xfffffff3fffff9ffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 13:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 14:
                  if (curChar == 35)
                     jjAddStates(11, 12);
                  break;
               case 15:
                  if (curChar == 35)
                     jjCheckNAddStates(3, 5);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 32:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 68:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(72);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(13, 14);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(15, 16);
                  else if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(75);
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 1:
                  jjAddStates(17, 18);
                  break;
               case 4:
               case 8:
                  jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  jjAddStates(3, 5);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 35:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 39:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 51:
                  if ((0x800000008000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 52:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 56:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 60:
                  if ((0x4000000040000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if ((0x10000000100000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 67:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 74:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 4:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   69, 70, 71, 12, 13, 14, 4, 5, 7, 8, 9, 15, 16, 65, 67, 54, 
   58, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\53\53", "\55\55", "\56", "\53", "\55", "\52", "\57", "\136", 
"\76", "\74", "\75\75", "\41\75", "\74\75", "\76\75", "\75", null, null, null, null, 
null, null, "\174\174", "\46\46", "\41", null, null, null, null, "\73", "\50", 
"\51", "\54", "\173", "\175", "\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SintacticoMetodosTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SintacticoMetodosTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003700L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          System.out.println("Esto es un comentario unilinea!");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
