/* Generated By:JavaCC: Do not edit this line. SintacticoMetodos.java */
package com.jagt.Analizadores.XML.Metodos;
import com.jagt.AST.*;
import java.util.LinkedList;
public class SintacticoMetodos implements SintacticoMetodosConstants {

        public static void main(String args[]) throws ParseException{

                SintacticoMetodos parser = new SintacticoMetodos(System.in);
                parser.inicio();

        }

  final public LinkedList<Metodo> inicio() throws ParseException {
 LinkedList<Metodo> metodos = new LinkedList<Metodo>(); Metodo m;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_PROC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      m = procedimiento();
                                 metodos.add(m);
    }
    jj_consume_token(0);
         {if (true) return metodos;}
    throw new Error("Missing return statement in function");
  }

  final public Metodo procedimiento() throws ParseException {
 Metodo nuevo = new Metodo(); LinkedList<Parametro> params; NodoParser ins,n; Token t;
    jj_consume_token(INICIO_PROC);
    jj_consume_token(INICIO_NOMBRE);
    t = jj_consume_token(ID);
                                 nuevo.setNombre(t.image);
    jj_consume_token(FIN_NOMBRE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INICIO_RET:
      jj_consume_token(INICIO_RET);
      n = tipo();
                                 nuevo.guardarTipo(n);
      jj_consume_token(FIN_RET);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(INICIO_PARAMS);
    params = parametros();
                                 nuevo.setParametros(params);
    jj_consume_token(FIN_PARAMS);
    jj_consume_token(INICIO_SRC);
    ins = instrucciones();
                                 nuevo.setInstrucciones(ins);
    jj_consume_token(FIN_SRC);
    jj_consume_token(FIN_PROC);
         {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Parametro> parametros() throws ParseException {
 LinkedList<Parametro> parametros = new LinkedList<Parametro>(); Parametro p;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      p = parametro();
                             parametros.add(p);
    }
         {if (true) return parametros;}
    throw new Error("Missing return statement in function");
  }

  final public Parametro parametro() throws ParseException {
 Token t; Parametro p; NodoParser nodo;
    jj_consume_token(MENOR);
    nodo = tipo();
    jj_consume_token(MAYOR);
    t = jj_consume_token(ID);
                         p = new Parametro(t.image); p.guardarTipo(nodo);
    jj_consume_token(MENOR);
    jj_consume_token(DIV);
    tipo();
    jj_consume_token(MAYOR);
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public void Empty() throws ParseException {
     System.out.println("epsilon");
  }

  final public NodoParser instrucciones() throws ParseException {
 NodoParser ins;
    ins = sentencia();
                                 {if (true) return ins;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser sentencia() throws ParseException {
 NodoParser sen;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_INSERTAR:
      sen = insertar();
                                 {if (true) return sen;}
      break;
    case RES_SELECCIONAR:
      sen = seleccionar();
      jj_consume_token(86);
                                 {if (true) return sen;}
      break;
    case RES_ACTUALIZAR:
      sen = actualizar();
                                 {if (true) return sen;}
      break;
    case RES_BORRAR:
      sen = borrar();
                                 {if (true) return sen;}
      break;
    case RES_DECLARAR:
      sen = declarar();
                                 {if (true) return sen;}
      break;
    case VAR:
      sen = asignar();
                                 {if (true) return sen;}
      break;
    case RES_IMPRIMIR:
      sen = imprimir();
                                 {if (true) return sen;}
      break;
    case ID:
      sen = llamada();
                                 {if (true) return sen;}
      jj_consume_token(86);
      break;
    case RETORNAR:
      sen = retorno();
                                 {if (true) return sen;}
      break;
    case DETENER:
      sen = detener();
                                 {if (true) return sen;}
      break;
    case SI:
    case SELECCIONA:
    case PARA:
    case MIENTRAS:
      sen = control();
                                 {if (true) return sen;}
      break;
    case RES_CONTAR:
      sen = contar();
      jj_consume_token(86);
                                 {if (true) return sen;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser contar() throws ParseException {
 NodoParser nodo,sel; Token t;
    t = jj_consume_token(RES_CONTAR);
                         nodo = new NodoParser("CONTAR","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    jj_consume_token(MENOR);
    jj_consume_token(MENOR);
    sel = seleccionar();
                         nodo.hijos().add(sel);
    jj_consume_token(MAYOR);
    jj_consume_token(MAYOR);
    jj_consume_token(88);
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_sentencias() throws ParseException {
 NodoParser sentencias,s;
         sentencias = new NodoParser("SENTENCIAS","",0,0);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RES_INSERTAR:
      case RES_ACTUALIZAR:
      case RES_BORRAR:
      case RES_SELECCIONAR:
      case RES_DECLARAR:
      case RES_IMPRIMIR:
      case RES_CONTAR:
      case SI:
      case SELECCIONA:
      case DETENER:
      case PARA:
      case MIENTRAS:
      case RETORNAR:
      case ID:
      case VAR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      s = sentencia();
                             sentencias.hijos().add(s);
    }
         {if (true) return sentencias;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser detener() throws ParseException {
 Token t; NodoParser nodo;
    t = jj_consume_token(DETENER);
                       nodo = new NodoParser("DETENER","",t.beginLine,t.beginColumn);
    jj_consume_token(86);
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser retorno() throws ParseException {
 Token t; NodoParser nodo,exp;
    t = jj_consume_token(RETORNAR);
                             nodo = new NodoParser("RETORNAR","",t.beginLine,t.beginColumn);
    exp = expresion();
                             nodo.hijos().add(exp);
    jj_consume_token(86);
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser imprimir() throws ParseException {
 NodoParser nodo,exp; Token t;
    t = jj_consume_token(RES_IMPRIMIR);
                                 nodo = new NodoParser("IMPRIMIR","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    exp = expresion();
                                 nodo.hijos().add(exp);
    jj_consume_token(88);
    jj_consume_token(86);
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser asignar() throws ParseException {
 Token v,id; NodoParser nodo = new NodoParser("ASIGNAR","",0,0); NodoParser acceso,exp;
    v = jj_consume_token(VAR);
                                 nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));
         acceso = new NodoParser("ACCESO","",0,0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO:
      jj_consume_token(PUNTO);
      id = jj_consume_token(ID);
                                 acceso.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
         nodo.hijos().add(acceso);
    jj_consume_token(ASIGNA);
    exp = expresion();
                                 nodo.hijos().add(exp);
    jj_consume_token(86);
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser declarar() throws ParseException {
 NodoParser declara = new NodoParser("DECLARAR","",0,0); NodoParser vars,tipov,exp;
    jj_consume_token(RES_DECLARAR);
    vars = lista_variables();
                                     declara.hijos().add(vars);
    tipov = tipo();
                                     declara.hijos().add(tipov);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNA:
      jj_consume_token(ASIGNA);
      exp = expresion();
                                     declara.hijos().add(exp);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(86);
         {if (true) return declara;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_variables() throws ParseException {
 NodoParser nodo = new NodoParser("VARIABLES","",0,0); NodoParser var; Token v;
    v = jj_consume_token(VAR);
                         nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(89);
      v = jj_consume_token(VAR);
                         nodo.hijos().add(new NodoParser("VAR",v.image,v.beginLine,v.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser borrar() throws ParseException {
 NodoParser nodo,d; Token t,id;
    t = jj_consume_token(RES_BORRAR);
                                 nodo = new NodoParser("BORRAR",t.image,t.beginLine,t.beginColumn);
    jj_consume_token(RES_EN);
    jj_consume_token(RES_TABLA);
    id = jj_consume_token(ID);
                                 nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_DONDE:
      d = donde();
                                 nodo.hijos().add(d);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(86);
                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser actualizar() throws ParseException {
 NodoParser nodo,lista,d,exps; Token t,id;
    t = jj_consume_token(RES_ACTUALIZAR);
                                     nodo = new NodoParser("ACTUALIZAR",t.image,t.beginLine,t.beginColumn);
    jj_consume_token(RES_TABLA);
    id = jj_consume_token(ID);
                                     nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    jj_consume_token(87);
    lista = lista_ids();
                                     nodo.hijos().add(lista);
    jj_consume_token(88);
    jj_consume_token(RES_VALORES);
    jj_consume_token(87);
    exps = lista_expresiones();
                                     nodo.hijos().add(exps);
    jj_consume_token(88);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_DONDE:
      d = donde();
                                     nodo.hijos().add(d);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(86);
                                     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser seleccionar() throws ParseException {
 NodoParser nodo,s,d,tipo,o; Token or,t,id,tabla;
    t = jj_consume_token(RES_SELECCIONAR);
                                     nodo = new NodoParser("SELECCIONAR",t.image,t.beginLine,t.beginColumn);
    s = seleccion();
                                     nodo.hijos().add(s);
    jj_consume_token(RES_DE);
    tabla = jj_consume_token(ID);
                                     nodo.hijos().add(new NodoParser("ID",tabla.image,tabla.beginLine,tabla.beginColumn));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_DONDE:
      d = donde();
                                     nodo.hijos().add(d);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ORDENAR:
      or = jj_consume_token(RES_ORDENAR);
                                      o = new NodoParser("ORDENAR",or.image,or.beginLine,or.beginColumn);
      id = jj_consume_token(ID);
                                     o.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
      tipo = tipo_orden();
                                     o.hijos().add(tipo); nodo.hijos().add(o);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser seleccion() throws ParseException {
 NodoParser nodo; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nodo = lista_ids();
                                     {if (true) return nodo;}
      break;
    case POR:
      id = jj_consume_token(POR);
                                     {if (true) return new NodoParser("TODO",id.image,id.beginLine,id.beginColumn);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipo_orden() throws ParseException {
 NodoParser nodo; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ASC:
      t = jj_consume_token(RES_ASC);
                                     {if (true) return new NodoParser("ASC",t.image,t.beginLine,t.beginColumn);}
      break;
    case RES_DESC:
      t = jj_consume_token(RES_DESC);
                                     {if (true) return new NodoParser("DESC",t.image,t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser donde() throws ParseException {
 NodoParser cond;
    jj_consume_token(RES_DONDE);
    cond = condicion();
                                     {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser llamada() throws ParseException {
 NodoParser nodo,temp,lista; Token id;
    id = jj_consume_token(ID);
                                         nodo = new NodoParser("ID",id.image,id.beginLine,id.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 87:
      jj_consume_token(87);
      lista = lista_expresiones();
                                         nodo = new NodoParser("LLAMADA","",0,0); nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn)); nodo.hijos().add(lista);
      jj_consume_token(88);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser insertar() throws ParseException {
 NodoParser nodo,lista,exps; Token t,id;
    t = jj_consume_token(RES_INSERTAR);
                                     nodo = new NodoParser("INSERTAR",t.image,t.beginLine,t.beginColumn);
    jj_consume_token(RES_EN);
    jj_consume_token(RES_TABLA);
    id = jj_consume_token(ID);
                                     nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 87:
      jj_consume_token(87);
      lista = lista_ids();
                                     nodo.hijos().add(lista);
      jj_consume_token(88);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RES_VALORES);
    jj_consume_token(87);
    exps = lista_expresiones();
                                     nodo.hijos().add(exps);
    jj_consume_token(88);
    jj_consume_token(86);
                                     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_ids() throws ParseException {
 NodoParser nodo; Token id;
    id = jj_consume_token(ID);
                                     nodo = new NodoParser("IDS","",0,0); nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(89);
      id = jj_consume_token(ID);
                                     nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipo() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ENTERO:
      t = jj_consume_token(RES_ENTERO);
                        System.out.println("entero"); {if (true) return new NodoParser("TIPO","entero",t.beginLine,t.beginColumn);}
      break;
    case RES_CADENA:
      t = jj_consume_token(RES_CADENA);
                        System.out.println("cadena"); {if (true) return new NodoParser("TIPO","cadena",t.beginLine,t.beginColumn);}
      break;
    case RES_BOOLEAN:
      t = jj_consume_token(RES_BOOLEAN);
                         System.out.println("cadena"); {if (true) return new NodoParser("TIPO","boolean",t.beginLine,t.beginColumn);}
      break;
    case RES_DOBLE:
      t = jj_consume_token(RES_DOBLE);
                       System.out.println("caracter"); {if (true) return new NodoParser("TIPO","doble",t.beginLine,t.beginColumn);}
      break;
    case RES_DATE:
      t = jj_consume_token(RES_DATE);
                      System.out.println("fecha"); {if (true) return new NodoParser("TIPO","fecha",t.beginLine,t.beginColumn);}
      break;
    case RES_DATETIME:
      t = jj_consume_token(RES_DATETIME);
                          System.out.println("fecha y hora"); {if (true) return new NodoParser("TIPO","fechahora",t.beginLine,t.beginColumn);}
      break;
    case ID:
      t = jj_consume_token(ID);
                System.out.println("id: "+t.image); {if (true) return new NodoParser("ID",t.image,t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//EXP
  final public NodoParser expresion() throws ParseException {
 NodoParser nodo,ope,exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
    case DOBLE:
    case CADENA:
    case FECHA:
    case HORA:
    case VERDADERO:
    case FALSO:
    case ID:
    case VAR:
    case 87:
      ope = operacion1();

      exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); {if (true) return exp;}}else{{if (true) return ope;}}
      break;
    case RES_CONTAR:
      exp = contar();
                             {if (true) return exp;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_expresiones() throws ParseException {
 NodoParser nodo,exp;
    exp = expresion();
                                      nodo = new NodoParser("EXPRESIONES","",0,0); nodo.hijos().add(exp);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(89);
      exp = expresion();
                                      nodo.hijos().add(exp);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser expresion2() throws ParseException {
 NodoParser nodo,ope,exp; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      t = jj_consume_token(MAS);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","+",t.beginLine,t.beginColumn));
      ope = operacion1();

      exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    case MENOS:
      t = jj_consume_token(MENOS);
                                     nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","-",t.beginLine,t.beginColumn));
      ope = operacion1();

      exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    default:
      jj_la1[20] = jj_gen;
      Empty();
                             {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacion1() throws ParseException {
 NodoParser nodo,tip,exp;
    tip = tipoValor();

    exp = operacion2();
                             if(exp!=null){exp.hijos().addFirst(tip); {if (true) return exp;}}else{{if (true) return tip;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacion2() throws ParseException {
 NodoParser nodo,exp,ope; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      t = jj_consume_token(POR);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","*",t.beginLine,t.beginColumn));
      exp = tipoValor();

      ope = operacion2();
                             if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} {if (true) return nodo;}
      break;
    case DIV:
      t = jj_consume_token(DIV);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","/",t.beginLine,t.beginColumn));
      exp = tipoValor();

      ope = operacion2();
                             if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} {if (true) return nodo;}
      break;
    default:
      jj_la1[21] = jj_gen;
      Empty();
                             {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipoValor() throws ParseException {
 NodoParser nodo = new NodoParser("EXP","",0,0); NodoParser tipo,tipoL; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 87:
      jj_consume_token(87);
      nodo = expresion();
      jj_consume_token(88);
                             {if (true) return nodo;}
      break;
    case ENTERO:
      t = jj_consume_token(ENTERO);
                             tipo = new NodoParser("entero",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case CADENA:
      t = jj_consume_token(CADENA);
                             tipo = new NodoParser("cadena",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case FECHA:
      t = jj_consume_token(FECHA);
                             tipo = new NodoParser("fecha",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case HORA:
      t = jj_consume_token(HORA);
                             tipo = new NodoParser("fechahora",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case DOBLE:
      t = jj_consume_token(DOBLE);
                             tipo = new NodoParser("doble",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case VERDADERO:
      t = jj_consume_token(VERDADERO);
                             tipo = new NodoParser("boolean","1",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case FALSO:
      t = jj_consume_token(FALSO);
                             tipo = new NodoParser("boolean","0",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case ID:
      tipoL = llamada();
                             nodo.hijos().add(tipoL); {if (true) return nodo;}
      break;
    case VAR:
      t = jj_consume_token(VAR);
                             tipo = new NodoParser("VAR",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser control() throws ParseException {
 NodoParser nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SI:
      nodo = si();
                                     {if (true) return nodo;}
      break;
    case PARA:
      nodo = para();
                                     {if (true) return nodo;}
      break;
    case SELECCIONA:
      nodo = seleccion_casos();
                                     {if (true) return nodo;}
      break;
    case MIENTRAS:
      nodo = mientras();
                                     {if (true) return nodo;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser si() throws ParseException {
 NodoParser nodo,con,sen; Token t;
    t = jj_consume_token(SI);
                                     nodo = new NodoParser("SI","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    con = condicion();
                                     nodo.hijos().add(con);
    jj_consume_token(88);
    jj_consume_token(90);
    sen = lista_sentencias();
                                     nodo.hijos().add(sen);
    jj_consume_token(91);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      t = jj_consume_token(SINO);
      jj_consume_token(90);
      sen = lista_sentencias();
                                     nodo.hijos().add(sen);
      jj_consume_token(91);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser seleccion_casos() throws ParseException {
 NodoParser nodo,exp,cas,def,sen,sns; Token t;
    t = jj_consume_token(SELECCIONA);
                                     nodo = new NodoParser("SELECCIONA","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    exp = expresion();
                                     nodo.hijos().add(exp);
    jj_consume_token(88);
    jj_consume_token(90);
    cas = casos();
                                     nodo.hijos().add(cas);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFECTO:
      jj_consume_token(DEFECTO);
      jj_consume_token(92);
      sen = lista_sentencias();
                                     nodo.hijos().add(sen);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(91);
                                     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser casos() throws ParseException {
 NodoParser nodo,caso,exp,sns,sen; Token t;
    t = jj_consume_token(CASO);
                                     nodo = new NodoParser("CASOS","",t.beginLine,t.beginColumn); caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);
    exp = expresion();
                                     caso.hijos().add(exp);
    jj_consume_token(92);
    sen = lista_sentencias();
                                     caso.hijos().add(sen);
     nodo.hijos().add(caso);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(CASO);
                                     caso = new NodoParser("CASO","",t.beginLine,t.beginColumn);
      exp = expresion();
                                     caso.hijos().add(exp);
      jj_consume_token(92);
      sen = lista_sentencias();
                                     caso.hijos().add(sen);
         nodo.hijos().add(caso);
    }
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser para() throws ParseException {
 NodoParser nodo,asig,con,cre,sen; Token t;
    t = jj_consume_token(PARA);
                                 nodo = new NodoParser("PARA","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    asig = declarar();
                                 nodo.hijos().add(asig);
    con = condicion();
                                 nodo.hijos().add(con);
    jj_consume_token(86);
    cre = crecimiento();
                                 nodo.hijos().add(cre);
    jj_consume_token(88);
    jj_consume_token(90);
    sen = lista_sentencias();
                                 nodo.hijos().add(sen);
    jj_consume_token(91);
                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser mientras() throws ParseException {
 NodoParser nodo,con,sns,sen; Token t;
    t = jj_consume_token(MIENTRAS);
                                 nodo = new NodoParser("MIENTRAS","",t.beginLine,t.beginColumn);
    jj_consume_token(87);
    con = condicion();
                                 nodo.hijos().add(con);
    jj_consume_token(88);
    jj_consume_token(90);
    sen = lista_sentencias();
                                 nodo.hijos().add(sen);
    jj_consume_token(91);
                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser condicion() throws ParseException {
 NodoParser nodo,ope,con;
    ope = operando1();
                         nodo = new NodoParser("EXP","",0,0); if(ope!=null){nodo.hijos().add(ope);}
    con = condicion2();
                         if(con!=null){nodo.hijos().add(con);}
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser condicion2() throws ParseException {
 NodoParser nodo,ope,con; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
                                 nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","OR",t.beginLine,t.beginColumn));
      ope = operando1();

      con = condicion2();
                                 if(con!=null){con.hijos().addFirst(ope); nodo.hijos().add(con);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    default:
      jj_la1[27] = jj_gen;
      Empty();
                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operando1() throws ParseException {
 NodoParser tip,ope;
    tip = tipoCondicion();
    ope = operando2();
                                 if(ope!=null){ope.hijos().addFirst(tip); {if (true) return ope;}}else{{if (true) return tip;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operando2() throws ParseException {
 NodoParser nodo,tip,ope; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
                                     nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","AND",t.beginLine,t.beginColumn));
      tip = tipoCondicion();

      ope = operando2();
                                 if(ope!=null){ope.hijos().addFirst(tip); nodo.hijos().add(ope);}else{nodo.hijos().add(tip);} {if (true) return nodo;}
      break;
    default:
      jj_la1[28] = jj_gen;
      Empty();
                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipoCondicion() throws ParseException {
 NodoParser exp,sub,nodo; boolean no = false; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      // condicion -> NOT subcondicion | subcondicion;
              t = jj_consume_token(NOT);
                                     System.out.println("! -> NOT"); exp = new NodoParser("EXP","",t.beginLine,t.beginColumn);
      jj_consume_token(87);
                                     System.out.println("( -> Parentesis condicion");
      sub = subcondicion();
                                     exp.hijos().addFirst(new NodoParser("NOT","!",t.beginLine,t.beginColumn)); exp.hijos().add(sub);
      jj_consume_token(88);
                                     System.out.println(") -> Parentesis condicion"); {if (true) return exp;}
      break;
    case ENTERO:
    case DOBLE:
    case CADENA:
    case FECHA:
    case HORA:
    case VERDADERO:
    case FALSO:
    case RES_CONTAR:
    case ID:
    case VAR:
    case 87:
      sub = subcondicion();
                                     System.out.println(") -> Parentesis condicion"); {if (true) return sub;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser subcondicion() throws ParseException {
 NodoParser nodo,exp,opl;
    // exp -> exp Ope_Logica exp
            exp = expresion();

    opl = operacionLogica();
                                 if(opl!=null){opl.hijos().addFirst(exp); {if (true) return opl;}}else{{if (true) return exp;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacionLogica() throws ParseException {
 NodoParser nodo,exp; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      t = jj_consume_token(IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","==",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case DIFERENTE:
      t = jj_consume_token(DIFERENTE);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","!=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MENOR:
      t = jj_consume_token(MENOR);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MENOR_IGUAL:
      t = jj_consume_token(MENOR_IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MAYOR_IGUAL:
      t = jj_consume_token(MAYOR_IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MAYOR:
      t = jj_consume_token(MAYOR);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    default:
      jj_la1[30] = jj_gen;
      Empty();
                           {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser crecimiento() throws ParseException {
 NodoParser nodo,dim,exp; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
      t = jj_consume_token(INCREMENTO);
                             nodo = new NodoParser("INCREMENTO","++",t.beginLine,t.beginColumn); {if (true) return nodo;}
      break;
    case DECREMENTO:
      t = jj_consume_token(DECREMENTO);
                             nodo = new NodoParser("DECREMENTO","--",t.beginLine,t.beginColumn); {if (true) return nodo;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SintacticoMetodosTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f000000,0xc0003e00,0x0,0x0,0x0,0xc0003e00,0x0,0x0,0x0,0x0,0x0,0x0,0xc0003e00,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x3cb3071,0x3cb3071,0x10000000,0x0,0x0,0x8,0x8,0x8,0x200,0x80000000,0xc00,0x0,0x0,0x0,0x0,0x10000,0x0,0x60000000,0x80000000,0x0,0x18a0000,0x40000,0x200000,0x100000,0x0,0x0,0x10000,0x0,0xc000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x8,0xc0000,0xc0000,0x0,0x100,0x2000000,0x0,0x0,0x0,0x0,0x40000,0x0,0x800000,0x800000,0x2000000,0x40000,0x8c0000,0x2000000,0x0,0x1,0x8c0000,0x0,0x0,0x0,0x0,0x8000,0x10000,0x8e0000,0xfc,0x0,};
   }

  /** Constructor with InputStream. */
  public SintacticoMetodos(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SintacticoMetodos(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SintacticoMetodosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SintacticoMetodos(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SintacticoMetodosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SintacticoMetodos(SintacticoMetodosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SintacticoMetodosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[93];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 93; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
