/* Generated By:JavaCC: Do not edit this line. SintacticoPaquetesTokenManager.java */
package com.jagt.Analizadores.Paquetes;
import com.jagt.AST.*;
import com.jagt.Logica.*;
import com.jagt.Comunicacion.*;
import java.util.LinkedList;
import com.jagt.GUI.Servidor;

/** Token Manager. */
public class SintacticoPaquetesTokenManager implements SintacticoPaquetesConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 24;
         }
         if ((active0 & 0x1fd80L) != 0L)
            return 63;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 44;
            return -1;
         }
         if ((active0 & 0x27800200L) != 0L)
         {
            jjmatchedKind = 46;
            return 74;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 75;
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 29;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 74;
         if ((active0 & 0x3b800200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return 74;
         }
         return -1;
      case 2:
         if ((active0 & 0x2b800200L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 74;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 74;
         return -1;
      case 3:
         if ((active0 & 0xb800200L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 74;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 74;
         return -1;
      case 4:
         if ((active0 & 0x1800000L) != 0L)
            return 74;
         if ((active0 & 0xa000200L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 74;
         }
         return -1;
      case 5:
         if ((active0 & 0xa000200L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 74;
         }
         return -1;
      case 6:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
            return 74;
         }
         if ((active0 & 0x200L) != 0L)
            return 74;
         return -1;
      case 7:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
            return 74;
         }
         return -1;
      case 8:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
            return 74;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 9;
            return 74;
         }
         return -1;
      case 10:
         if ((active0 & 0xa000000L) != 0L)
            return 74;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x1fd80L, 0x0L);
      case 40:
         return jjStopAtPos(0, 68);
      case 41:
         return jjStopAtPos(0, 69);
      case 42:
         return jjStopAtPos(0, 33);
      case 43:
         return jjStopAtPos(0, 31);
      case 44:
         return jjStopAtPos(0, 54);
      case 45:
         return jjStartNfaWithStates_0(0, 32, 75);
      case 46:
         return jjStopAtPos(0, 30);
      case 47:
         return jjStopAtPos(0, 34);
      case 58:
         return jjStopAtPos(0, 53);
      case 60:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0xef80010000000000L, 0xfL);
      case 61:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 62:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x25000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xa600000000000000L, active1, 0xaL);
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 74);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 104:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8008000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 74);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000800000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000008000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000008000L, active1, 0L);
      case 104:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000800L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000080L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100L, active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 74);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000001000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000a000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000200L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2400L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(4, 11);
         break;
      case 62:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(4, 62);
         break;
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 74);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 74);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000001200L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 63);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(5, 66);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000010000L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xa100L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         break;
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(6, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 58);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 61);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(6, 67);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000100L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 74);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000100L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(8, 8);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(8, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 74);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(57);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 33)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 63)
                     jjCheckNAddTwoStates(36, 37);
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 29:
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(74);
                  break;
               case 63:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(74);
                  break;
               case 1:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 39 && kind > 20)
                     kind = 20;
                  break;
               case 26:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 27:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 31:
                  if (curChar == 33 && kind > 44)
                     kind = 44;
                  break;
               case 35:
                  if (curChar == 63)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 63 && kind > 45)
                     kind = 45;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 42:
                  if ((0xfffffff3fffff9ffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 43:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 44:
                  if (curChar == 35)
                     jjAddStates(8, 9);
                  break;
               case 45:
                  if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  break;
               case 56:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(0, 2);
                  break;
               case 62:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if (curChar == 45)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 39 && kind > 19)
                     kind = 19;
                  break;
               case 71:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(74);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if (curChar == 102)
                     jjAddStates(10, 11);
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 82)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 9:
                  if (curChar == 101 && kind > 21)
                     kind = 21;
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 111 && kind > 21)
                     kind = 21;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 124 && kind > 42)
                     kind = 42;
                  break;
               case 23:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 68 && kind > 43)
                     kind = 43;
                  break;
               case 30:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 84 && kind > 44)
                     kind = 44;
                  break;
               case 33:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  jjAddStates(12, 13);
                  break;
               case 38:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(40);
                  break;
               case 42:
                  jjAddStates(5, 7);
                  break;
               case 47:
                  if (curChar == 102)
                     jjAddStates(10, 11);
                  break;
               case 48:
                  if (curChar == 111 && kind > 22)
                     kind = 22;
                  break;
               case 49:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101 && kind > 22)
                     kind = 22;
                  break;
               case 53:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 73:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 58, 59, 63, 71, 42, 43, 44, 45, 46, 51, 55, 36, 37, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\47\154\157\147\151\156\47", 
"\47\165\163\165\141\162\151\157\47", "\102\147\143\157\154\157\162", "\47\160\141\163\163\167\157\162\144\47", 
"\47\146\151\156\47", "\47\165\163\161\154\47", 
"\47\151\156\163\164\162\165\143\143\151\157\156\47", "\47\160\141\161\165\145\164\145\47", "\47\162\145\160\157\162\164\145\47", 
"\47\141\162\142\157\154\47", null, null, null, null, null, null, "\124\141\142\154\141", 
"\104\157\156\144\145", "\123\145\154\145\143\143\151\157\156\141\162", "\104\145", 
"\117\162\144\145\156\141\162\137\120\157\162", "\101\123\103", "\104\105\123\103", "\56", "\53", "\55", "\52", "\57", "\136", 
"\76", "\74", "\75\75", "\41\75", "\74\75", "\76\75", null, null, null, null, null, 
null, null, null, null, "\133", "\135", "\72", "\54", "\74\150\164\155\154\76", 
"\74\150\145\141\144\76", "\74\57\150\145\141\144\76", "\74\57\150\164\155\154\76", 
"\74\142\157\144\171", "\75", "\74\57\142\157\144\171\76", "\74\144\151\166\76", 
"\74\57\144\151\166\76", "\74\150", "\74\57\150", "\74\165\163\161\154\76", 
"\74\57\165\163\161\154\76", "\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[75];
private final int[] jjstateSet = new int[150];
protected char curChar;
/** Constructor. */
public SintacticoPaquetesTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SintacticoPaquetesTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003700L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
