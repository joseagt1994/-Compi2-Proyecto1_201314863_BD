/* Generated By:JavaCC: Do not edit this line. SintacticoPaquetes.java */
package com.jagt.Analizadores.Paquetes;
import com.jagt.AST.*;
import com.jagt.Logica.*;
import com.jagt.Comunicacion.*;
import java.util.LinkedList;
import com.jagt.GUI.Servidor;

public class SintacticoPaquetes implements SintacticoPaquetesConstants {

        public static void main(String args[]) throws ParseException{

                SintacticoPaquetes parser = new SintacticoPaquetes(System.in);
                parser.inicio();

        }

  final public ManejadorPaquete inicio() throws ParseException {
 ManejadorPaquete lista;
    jj_consume_token(51);
    lista = tipo_instruccion();
    jj_consume_token(52);
    jj_consume_token(0);
         {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public ManejadorPaquete tipo_instruccion() throws ParseException {
 ManejadorPaquete manejador;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGIN:
      jj_consume_token(LOGIN);
      jj_consume_token(53);
      jj_consume_token(51);
      manejador = login();
      jj_consume_token(52);
                         {if (true) return manejador;}
      break;
    case PAQUETE:
      jj_consume_token(PAQUETE);
      jj_consume_token(53);
      manejador = tipo_paquete();
         {if (true) return manejador;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ManejadorPaquete login() throws ParseException {
 Token user,pass;
    jj_consume_token(USUARIO);
    jj_consume_token(53);
    user = jj_consume_token(CADENA);
    jj_consume_token(54);
    jj_consume_token(PASSWORD);
    jj_consume_token(53);
    pass = jj_consume_token(CADENA);
                                    SistemaBaseDatos bd = SistemaBaseDatos.getInstance();
                                    if(bd.login(user.image.replaceAll("\u005c"",""),pass.image.replaceAll("\u005c"",""))){
                                        {if (true) return new ManejadorPaquete(user.image,true);}
                                    }else{
                                        {if (true) return new ManejadorPaquete(user.image,false);}
                                    }
    throw new Error("Missing return statement in function");
  }

  final public ManejadorPaquete tipo_paquete() throws ParseException {
 ManejadorPaquete manejador = null; String cadena; Token ins;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIN:
      jj_consume_token(FIN);
                         {if (true) return new ManejadorPaquete(ManejadorPaquete.LOGOUT);}
      break;
    case ARBOL:
      jj_consume_token(ARBOL);
                         {if (true) return manejador;}
      break;
    case USQL:
      jj_consume_token(USQL);
      jj_consume_token(54);
      jj_consume_token(INSTRUCCION);
      jj_consume_token(53);
      ins = jj_consume_token(INSTRUCCIONES);
                                    String usql = ins.image.substring(1, ins.image.length()-1);
                                    manejador = Servidor.getInstance().ejecutarUSQL(usql);
                                    {if (true) return manejador;}
      break;
    case REPORTE:
      jj_consume_token(REPORTE);
      jj_consume_token(54);
      jj_consume_token(INSTRUCCION);
      jj_consume_token(53);
      cadena = html();
                                    manejador = new ManejadorPaquete("?"+cadena+"?");
                                    {if (true) return manejador;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String html() throws ParseException {
 String cad = ""; String c;
    jj_consume_token(55);
                         cad += "<html>\u005cn";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
                         cad += "\u005ct<head>\u005cn";
      jj_consume_token(57);
                         cad += "\u005ct</head>\u005cn";
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      c = cuerpo();
                          cad += c;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(58);
                         cad += "</html>\u005cn";
         {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public String cuerpo() throws ParseException {
 String i,cad = ""; Token t;
    jj_consume_token(59);
                                 cad += "\u005ct<body";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BGCOLOR:
      jj_consume_token(BGCOLOR);
                                 cad += " Bgcolor";
      jj_consume_token(60);
                                 cad += " = ";
      t = jj_consume_token(CADENA);
                                 cad += t.image;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(MAYOR);
                                 cad += ">\u005cn";
    i = instruccionesHTML();
                                 cad += i;
    jj_consume_token(61);
                                 cad += "\u005ct</body>\u005cn";
         {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public String instruccionesHTML() throws ParseException {
 String i,cad = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 64:
      case 66:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      i = instruccionHTML();
                                 cad += i;
    }
     {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public String instruccionHTML() throws ParseException {
 String cad;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      cad = usql();
                             {if (true) return cad;}
      break;
    case 64:
      cad = etiqueta();
                             {if (true) return cad;}
      break;
    case 62:
      cad = contenedor();
                             {if (true) return cad;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String contenedor() throws ParseException {
 String cad = ""; String val;
    jj_consume_token(62);
                     cad += "<div>\u005cn";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 64:
      case 66:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      val = instruccionHTML();
                                         cad += val+"\u005cn";
    }
    jj_consume_token(63);
                     cad += "</div>\u005cn"; {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public String etiqueta() throws ParseException {
 String cad = ""; Token t;
    jj_consume_token(64);
                         cad += "\u005ct\u005ct<h";
    t = jj_consume_token(ENTERO);
                         cad += t.image;
    jj_consume_token(MAYOR);
                         cad += ">";
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(ID);
                         cad += t.image;
    }
    jj_consume_token(65);
                         cad += "\u005ct\u005ct<h";
    jj_consume_token(ENTERO);
                         cad += t.image;
    jj_consume_token(MAYOR);
                         cad += "/>\u005cn";
         {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public String usql() throws ParseException {
 String cad = ""; NodoParser sen;
    jj_consume_token(66);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_SELECCIONAR:
      sen = seleccionar();
                                     Compilador compi = new Compilador(sen); cad = compi.getReporte();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(67);
         {if (true) return cad;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser seleccionar() throws ParseException {
 NodoParser nodo,s,d,tipo,o,lista,id; Token or,t;
    t = jj_consume_token(RES_SELECCIONAR);
                                     nodo = new NodoParser("SELECCIONAR",t.image,t.beginLine,t.beginColumn);
    s = seleccion();
                                     nodo.hijos().add(s);
    jj_consume_token(RES_DE);
    lista = lista_ids();
                                  nodo.hijos().add(lista);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_DONDE:
      d = donde();
                                     nodo.hijos().add(d);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ORDENAR:
      or = jj_consume_token(RES_ORDENAR);
                                     o = new NodoParser("ORDENAR",or.image,or.beginLine,or.beginColumn);
      id = acceso();
                                     o.hijos().add(id);
      tipo = tipo_orden();
                                     o.hijos().add(tipo); nodo.hijos().add(o);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_ids() throws ParseException {
 NodoParser nodo; Token id;
    id = jj_consume_token(ID);
                                     nodo = new NodoParser("IDS","",0,0); nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(54);
      id = jj_consume_token(ID);
                                     nodo.hijos().add(new NodoParser("ID",id.image,id.beginLine,id.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser lista_acceso() throws ParseException {
 NodoParser sentencias,s;
         sentencias = new NodoParser("LISTA_ACCESO","",0,0);
    s = acceso();
                      sentencias.hijos().add(s);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(54);
      s = acceso();
                          sentencias.hijos().add(s);
    }
         {if (true) return sentencias;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser acceso() throws ParseException {
 NodoParser nodo = new NodoParser("ACCESO","",0,0); NodoParser a; Token t;
    a = tipo_acceso();
                              nodo.hijos().add(a);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTO:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      jj_consume_token(PUNTO);
      t = jj_consume_token(ID);
                              nodo.hijos().add(new NodoParser("ID",t.image,t.beginLine,t.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipo_acceso() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
                     {if (true) return new NodoParser("VAR",t.image,t.beginLine,t.beginColumn);}
      break;
    case ID:
      t = jj_consume_token(ID);
                     {if (true) return new NodoParser("ID",t.image,t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser seleccion() throws ParseException {
 NodoParser nodo; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case VAR:
      nodo = lista_acceso();
                                     {if (true) return nodo;}
      break;
    case POR:
      id = jj_consume_token(POR);
                                     {if (true) return new NodoParser("TODO",id.image,id.beginLine,id.beginColumn);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipo_orden() throws ParseException {
 NodoParser nodo; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ASC:
      t = jj_consume_token(RES_ASC);
                                     {if (true) return new NodoParser("ASC",t.image,t.beginLine,t.beginColumn);}
      break;
    case RES_DESC:
      t = jj_consume_token(RES_DESC);
                                     {if (true) return new NodoParser("DESC",t.image,t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser donde() throws ParseException {
 NodoParser cond;
    jj_consume_token(RES_DONDE);
    cond = condicion();
                                     {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

//EXP
  final public NodoParser expresion() throws ParseException {
 NodoParser nodo,ope,exp;
    ope = operacion1();

    exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); {if (true) return exp;}}else{{if (true) return ope;}}
    throw new Error("Missing return statement in function");
  }

  final public void Empty() throws ParseException {
     System.out.println("epsilon");
  }

  final public NodoParser expresion2() throws ParseException {
 NodoParser nodo,ope,exp; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      t = jj_consume_token(MAS);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","+",t.beginLine,t.beginColumn));
      ope = operacion1();

      exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    case MENOS:
      t = jj_consume_token(MENOS);
                                     nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","-",t.beginLine,t.beginColumn));
      ope = operacion1();

      exp = expresion2();
                             if(exp!=null){exp.hijos().addFirst(ope); nodo.hijos().add(exp);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    default:
      jj_la1[18] = jj_gen;
      Empty();
                             {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacion1() throws ParseException {
 NodoParser nodo,tip,exp;
    tip = tipoValor();

    exp = operacion2();
                             if(exp!=null){exp.hijos().addFirst(tip); {if (true) return exp;}}else{{if (true) return tip;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacion2() throws ParseException {
 NodoParser nodo,exp,ope; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      t = jj_consume_token(POR);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","*",t.beginLine,t.beginColumn));
      exp = tipoValor();

      ope = operacion2();
                             if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} {if (true) return nodo;}
      break;
    case DIV:
      t = jj_consume_token(DIV);
                                   nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPEARIT","/",t.beginLine,t.beginColumn));
      exp = tipoValor();

      ope = operacion2();
                             if(ope!=null){ope.hijos().addFirst(exp); nodo.hijos().add(ope);}else{nodo.hijos().add(exp);} {if (true) return nodo;}
      break;
    default:
      jj_la1[19] = jj_gen;
      Empty();
                             {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipoValor() throws ParseException {
 NodoParser nodo = new NodoParser("EXP","",0,0); NodoParser tipo,tipoL; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      jj_consume_token(68);
      nodo = expresion();
      jj_consume_token(69);
                             {if (true) return nodo;}
      break;
    case ENTERO:
      t = jj_consume_token(ENTERO);
                             tipo = new NodoParser("entero",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case CADENA:
      t = jj_consume_token(CADENA);
                             tipo = new NodoParser("cadena",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case FECHA:
      t = jj_consume_token(FECHA);
                             tipo = new NodoParser("fecha",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case HORA:
      t = jj_consume_token(HORA);
                             tipo = new NodoParser("fechahora",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case DOBLE:
      t = jj_consume_token(DOBLE);
                             tipo = new NodoParser("doble",t.image,t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case VERDADERO:
      t = jj_consume_token(VERDADERO);
                             tipo = new NodoParser("boolean","1",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    case FALSO:
      t = jj_consume_token(FALSO);
                             tipo = new NodoParser("boolean","0",t.beginLine,t.beginColumn); nodo.hijos().add(tipo); {if (true) return nodo;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser condicion() throws ParseException {
 NodoParser nodo,ope,con;
    ope = operando1();
                         nodo = new NodoParser("EXP","",0,0); if(ope!=null){nodo.hijos().add(ope);}
    con = condicion2();
                         if(con!=null){nodo.hijos().add(con);}
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser condicion2() throws ParseException {
 NodoParser nodo,ope,con; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
                                 nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","OR",t.beginLine,t.beginColumn));
      ope = operando1();

      con = condicion2();
                                 if(con!=null){con.hijos().addFirst(ope); nodo.hijos().add(con);}else{nodo.hijos().add(ope);} {if (true) return nodo;}
      break;
    default:
      jj_la1[21] = jj_gen;
      Empty();
                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operando1() throws ParseException {
 NodoParser tip,ope;
    tip = tipoCondicion();
    ope = operando2();
                                 if(ope!=null){ope.hijos().addFirst(tip); {if (true) return ope;}}else{{if (true) return tip;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operando2() throws ParseException {
 NodoParser nodo,tip,ope; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
                                     nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","AND",t.beginLine,t.beginColumn));
      tip = tipoCondicion();

      ope = operando2();
                                 if(ope!=null){ope.hijos().addFirst(tip); nodo.hijos().add(ope);}else{nodo.hijos().add(tip);} {if (true) return nodo;}
      break;
    default:
      jj_la1[22] = jj_gen;
      Empty();
                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser tipoCondicion() throws ParseException {
 NodoParser exp,sub,nodo; boolean no = false; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      // condicion -> NOT subcondicion | subcondicion;
              t = jj_consume_token(NOT);
                                     System.out.println("! -> NOT"); exp = new NodoParser("EXP","",t.beginLine,t.beginColumn);
      jj_consume_token(68);
                                     System.out.println("( -> Parentesis condicion");
      sub = subcondicion();
                                     exp.hijos().addFirst(new NodoParser("NOT","!",t.beginLine,t.beginColumn)); exp.hijos().add(sub);
      jj_consume_token(69);
                                     System.out.println(") -> Parentesis condicion"); {if (true) return exp;}
      break;
    case ENTERO:
    case DOBLE:
    case FECHA:
    case HORA:
    case VERDADERO:
    case FALSO:
    case CADENA:
    case 68:
      sub = subcondicion();
                                     System.out.println(") -> Parentesis condicion"); {if (true) return sub;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoParser subcondicion() throws ParseException {
 NodoParser nodo,exp,opl;
    // exp -> exp Ope_Logica exp
            exp = expresion();

    opl = operacionLogica();
                                 if(opl!=null){opl.hijos().addFirst(exp); {if (true) return opl;}}else{{if (true) return exp;}}
    throw new Error("Missing return statement in function");
  }

  final public NodoParser operacionLogica() throws ParseException {
 NodoParser nodo,exp; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      t = jj_consume_token(IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","==",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case DIFERENTE:
      t = jj_consume_token(DIFERENTE);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","!=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MENOR:
      t = jj_consume_token(MENOR);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MENOR_IGUAL:
      t = jj_consume_token(MENOR_IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA","<=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MAYOR_IGUAL:
      t = jj_consume_token(MAYOR_IGUAL);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">=",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    case MAYOR:
      t = jj_consume_token(MAYOR);
      exp = expresion();
                           nodo = new NodoParser("EXP","",t.beginLine,t.beginColumn); nodo.hijos().add(new NodoParser("OPELOGICA",">",t.beginLine,t.beginColumn)); nodo.hijos().add(exp); {if (true) return nodo;}
      break;
    default:
      jj_la1[24] = jj_gen;
      Empty();
                           {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SintacticoPaquetesTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4080,0x19800,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x2000000,0x1000000,0x8000000,0x0,0x0,0x40000000,0x0,0x0,0x30000000,0x80000000,0x0,0x7e0000,0x0,0x0,0x7e0000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000000,0x8000000,0x0,0x40000000,0x40000000,0x40000000,0x4000,0x0,0x0,0x0,0x400000,0x400000,0x0,0xc000,0xc002,0x0,0x1,0x6,0x40000,0x400,0x800,0x41000,0x3f0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x5,0x5,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x0,};
   }

  /** Constructor with InputStream. */
  public SintacticoPaquetes(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SintacticoPaquetes(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SintacticoPaquetesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SintacticoPaquetes(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SintacticoPaquetesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SintacticoPaquetes(SintacticoPaquetesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SintacticoPaquetesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
